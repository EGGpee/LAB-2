
Lab0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d6c  08005d6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d6c  08005d6c  00015d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d74  08005d74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012f28  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f9c  20012f9c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012aed  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9d  00000000  00000000  00032b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00035630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  000366e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023099  00000000  00000000  00037688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cbc  00000000  00000000  0005a721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ef6  00000000  00000000  0006e3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001412d3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000498c  00000000  00000000  00141324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c1c 	.word	0x08005c1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005c1c 	.word	0x08005c1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fc19 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f843 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8d5 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8a9 	bl	80006ec <MX_USART2_UART_Init>
  //Lab 1
//  msgQueue  = xQueueCreate(1, sizeof(unsigned long));
//  xTaskCreate(LEDTask_App,"LEDTask_App",1000,NULL,1,NULL);
//  xTaskCreate(buttonSwitch_App,"buttonSwitch_App",1000,NULL,1,NULL);

  xTaskCreate(Red_LED_App,"RedLED",1000,NULL,1,NULL);
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a8:	4913      	ldr	r1, [pc, #76]	; (80005f8 <main+0x74>)
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <main+0x78>)
 80005ac:	f002 ff96 	bl	80034dc <xTaskCreate>
  xTaskCreate(Green_LED_App,"GreLED",1000,NULL,1,NULL);
 80005b0:	2300      	movs	r3, #0
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2301      	movs	r3, #1
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005be:	4910      	ldr	r1, [pc, #64]	; (8000600 <main+0x7c>)
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0x80>)
 80005c2:	f002 ff8b 	bl	80034dc <xTaskCreate>
  xTaskCreate(Delay_App,"Delay",1000,NULL,14,NULL);
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	230e      	movs	r3, #14
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <main+0x84>)
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <main+0x88>)
 80005d8:	f002 ff80 	bl	80034dc <xTaskCreate>
  xTaskCreate(TaskMonitor_APP,"Monit",1000,NULL,3,NULL);
 80005dc:	2300      	movs	r3, #0
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2303      	movs	r3, #3
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ea:	4909      	ldr	r1, [pc, #36]	; (8000610 <main+0x8c>)
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <main+0x90>)
 80005ee:	f002 ff75 	bl	80034dc <xTaskCreate>
  vTaskStartScheduler();
 80005f2:	f003 f8e5 	bl	80037c0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x72>
 80005f8:	08005c4c 	.word	0x08005c4c
 80005fc:	08000a11 	.word	0x08000a11
 8000600:	08005c54 	.word	0x08005c54
 8000604:	08000a3d 	.word	0x08000a3d
 8000608:	08005c5c 	.word	0x08005c5c
 800060c:	08000a69 	.word	0x08000a69
 8000610:	08005c64 	.word	0x08005c64
 8000614:	080009f9 	.word	0x080009f9

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fe90 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800068c:	2332      	movs	r3, #50	; 0x32
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000690:	2304      	movs	r3, #4
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe83 	bl	80013a8 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 fa06 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f8e4 	bl	8001898 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f9ef 	bl	8000ab8 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_USART2_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000724:	f001 fdb8 	bl	8002298 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 f9c3 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000090 	.word	0x20000090
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	4ba1      	ldr	r3, [pc, #644]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4aa0      	ldr	r2, [pc, #640]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b9e      	ldr	r3, [pc, #632]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a99      	ldr	r2, [pc, #612]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b97      	ldr	r3, [pc, #604]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b93      	ldr	r3, [pc, #588]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a92      	ldr	r2, [pc, #584]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b90      	ldr	r3, [pc, #576]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b8c      	ldr	r3, [pc, #560]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a8b      	ldr	r2, [pc, #556]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b89      	ldr	r3, [pc, #548]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b85      	ldr	r3, [pc, #532]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a84      	ldr	r2, [pc, #528]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b82      	ldr	r3, [pc, #520]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b7e      	ldr	r3, [pc, #504]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a7d      	ldr	r2, [pc, #500]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b7b      	ldr	r3, [pc, #492]	; (80009e0 <MX_GPIO_Init+0x2a0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2108      	movs	r1, #8
 8000802:	4878      	ldr	r0, [pc, #480]	; (80009e4 <MX_GPIO_Init+0x2a4>)
 8000804:	f000 fd9c 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	4876      	ldr	r0, [pc, #472]	; (80009e8 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fd97 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ledGreen_Pin|ledOrange_Pin|ledRed_Pin|ledBlue_Pin
 8000812:	2200      	movs	r2, #0
 8000814:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000818:	4874      	ldr	r0, [pc, #464]	; (80009ec <MX_GPIO_Init+0x2ac>)
 800081a:	f000 fd91 	bl	8001340 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800081e:	2308      	movs	r3, #8
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	486b      	ldr	r0, [pc, #428]	; (80009e4 <MX_GPIO_Init+0x2a4>)
 8000836:	f000 fbe7 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4865      	ldr	r0, [pc, #404]	; (80009e8 <MX_GPIO_Init+0x2a8>)
 8000852:	f000 fbd9 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000866:	2305      	movs	r3, #5
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	485d      	ldr	r0, [pc, #372]	; (80009e8 <MX_GPIO_Init+0x2a8>)
 8000872:	f000 fbc9 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonBlue_Pin */
  GPIO_InitStruct.Pin = buttonBlue_Pin;
 8000876:	2301      	movs	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(buttonBlue_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4859      	ldr	r0, [pc, #356]	; (80009f0 <MX_GPIO_Init+0x2b0>)
 800088a:	f000 fbbd 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800088e:	2310      	movs	r3, #16
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800089e:	2306      	movs	r3, #6
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4851      	ldr	r0, [pc, #324]	; (80009f0 <MX_GPIO_Init+0x2b0>)
 80008aa:	f000 fbad 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008ae:	23e0      	movs	r3, #224	; 0xe0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4849      	ldr	r0, [pc, #292]	; (80009f0 <MX_GPIO_Init+0x2b0>)
 80008ca:	f000 fb9d 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ce:	2304      	movs	r3, #4
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4844      	ldr	r0, [pc, #272]	; (80009f4 <MX_GPIO_Init+0x2b4>)
 80008e2:	f000 fb91 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	483c      	ldr	r0, [pc, #240]	; (80009f4 <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fb80 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledGreen_Pin ledOrange_Pin ledRed_Pin ledBlue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = ledGreen_Pin|ledOrange_Pin|ledRed_Pin|ledBlue_Pin
 8000908:	f24f 0310 	movw	r3, #61456	; 0xf010
 800090c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4832      	ldr	r0, [pc, #200]	; (80009ec <MX_GPIO_Init+0x2ac>)
 8000922:	f000 fb71 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000926:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000938:	2306      	movs	r3, #6
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4829      	ldr	r0, [pc, #164]	; (80009e8 <MX_GPIO_Init+0x2a8>)
 8000944:	f000 fb60 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4824      	ldr	r0, [pc, #144]	; (80009f0 <MX_GPIO_Init+0x2b0>)
 800095e:	f000 fb53 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000962:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000974:	230a      	movs	r3, #10
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	481c      	ldr	r0, [pc, #112]	; (80009f0 <MX_GPIO_Init+0x2b0>)
 8000980:	f000 fb42 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000984:	2320      	movs	r3, #32
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <MX_GPIO_Init+0x2ac>)
 8000998:	f000 fb36 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800099c:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a2:	2312      	movs	r3, #18
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	480e      	ldr	r0, [pc, #56]	; (80009f4 <MX_GPIO_Init+0x2b4>)
 80009ba:	f000 fb25 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_GPIO_Init+0x2a4>)
 80009d4:	f000 fb18 	bl	8001008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	; 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400

080009f8 <TaskMonitor_APP>:

/* USER CODE BEGIN 4 */

//Lab 2
void TaskMonitor_APP(void *pvParameters){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	for(;;){
		TaskMonitor();
 8000a00:	f003 fbf0 	bl	80041e4 <TaskMonitor>
		vTaskDelay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a08:	f002 fea6 	bl	8003758 <vTaskDelay>
	for(;;){
 8000a0c:	e7f8      	b.n	8000a00 <TaskMonitor_APP+0x8>
	...

08000a10 <Red_LED_App>:
	}
}

void Red_LED_App(void *pvParameters){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 8000a18:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a1c:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(ledRed_GPIO_Port, GPIO_PIN_14);
 8000a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <Red_LED_App+0x28>)
 8000a24:	f000 fca5 	bl	8001372 <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f002 fe95 	bl	8003758 <vTaskDelay>
		Redtimer+=2;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	3302      	adds	r3, #2
 8000a32:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(ledRed_GPIO_Port, GPIO_PIN_14);
 8000a34:	e7f3      	b.n	8000a1e <Red_LED_App+0xe>
 8000a36:	bf00      	nop
 8000a38:	40020c00 	.word	0x40020c00

08000a3c <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 800;
 8000a44:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a48:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(ledGreen_GPIO_Port, GPIO_PIN_12);
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <Green_LED_App+0x28>)
 8000a50:	f000 fc8f 	bl	8001372 <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f002 fe7f 	bl	8003758 <vTaskDelay>
		Greentimer+=2;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(ledGreen_GPIO_Port, GPIO_PIN_12);
 8000a60:	e7f3      	b.n	8000a4a <Green_LED_App+0xe>
 8000a62:	bf00      	nop
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <Delay_App>:
	}
}
void Delay_App(void *pvParameters){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	int delayflag = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
		if(delayflag==0){
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d105      	bne.n	8000a86 <Delay_App+0x1e>
			delaytime = 1000;
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	60bb      	str	r3, [r7, #8]
			delayflag = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <Delay_App+0x24>
		}
		else{
			delaytime = 0xFFFFFFFF;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	60bb      	str	r3, [r7, #8]
		}
		vTaskDelay(delaytime);
 8000a8c:	68b8      	ldr	r0, [r7, #8]
 8000a8e:	f002 fe63 	bl	8003758 <vTaskDelay>
		if(delayflag==0){
 8000a92:	e7ef      	b.n	8000a74 <Delay_App+0xc>

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 f9ad 	bl	8000e04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40001400 	.word	0x40001400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_UART_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b8a:	f000 fa3d 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <HAL_InitTick+0xe4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <HAL_InitTick+0xe4>)
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <HAL_InitTick+0xe4>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f003 0320 	and.w	r3, r3, #32
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd0:	f107 0210 	add.w	r2, r7, #16
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f87c 	bl	8001cd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d103      	bne.n	8000bf2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bea:	f001 f84d 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8000bee:	6378      	str	r0, [r7, #52]	; 0x34
 8000bf0:	e004      	b.n	8000bfc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bf2:	f001 f849 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <HAL_InitTick+0xe8>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	0c9b      	lsrs	r3, r3, #18
 8000c06:	3b01      	subs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <HAL_InitTick+0xec>)
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <HAL_InitTick+0xec>)
 8000c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c16:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_InitTick+0xec>)
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_InitTick+0xec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HAL_InitTick+0xec>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_InitTick+0xec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <HAL_InitTick+0xec>)
 8000c32:	f001 f883 	bl	8001d3c <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d11b      	bne.n	8000c7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <HAL_InitTick+0xec>)
 8000c46:	f001 f8d3 	bl	8001df0 <HAL_TIM_Base_Start_IT>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d111      	bne.n	8000c7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c58:	2037      	movs	r0, #55	; 0x37
 8000c5a:	f000 f9c7 	bl	8000fec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d808      	bhi.n	8000c76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	2037      	movs	r0, #55	; 0x37
 8000c6a:	f000 f9a3 	bl	8000fb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_InitTick+0xf4>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	e002      	b.n	8000c7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3738      	adds	r7, #56	; 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	431bde83 	.word	0x431bde83
 8000c90:	200000d4 	.word	0x200000d4
 8000c94:	40001400 	.word	0x40001400
 8000c98:	20000004 	.word	0x20000004

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM7_IRQHandler+0x10>)
 8000cce:	f001 f8ff 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000d4 	.word	0x200000d4

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f004 fae6 	bl	80052dc <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20020000 	.word	0x20020000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	2000011c 	.word	0x2000011c
 8000d44:	20012fa0 	.word	0x20012fa0

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd7 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f004 faa5 	bl	80052e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fbf1 	bl	8000584 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000db0:	08005d7c 	.word	0x08005d7c
  ldr r2, =_sbss
 8000db4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000db8:	20012f9c 	.word	0x20012f9c

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f8d8 	bl	8000f9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fed8 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fe66 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000120 	.word	0x20000120

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000120 	.word	0x20000120

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff4c 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc6:	f7ff ff61 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	6978      	ldr	r0, [r7, #20]
 8000fd2:	f7ff ffb1 	bl	8000f38 <NVIC_EncodePriority>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff80 	bl	8000ee4 <__NVIC_SetPriority>
}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff54 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e16b      	b.n	80012fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 815a 	bne.w	80012f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	2b02      	cmp	r3, #2
 8001058:	d130      	bne.n	80010bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d017      	beq.n	80010f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80b4 	beq.w	80012f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a5f      	ldr	r2, [pc, #380]	; (8001314 <HAL_GPIO_Init+0x30c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011aa:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <HAL_GPIO_Init+0x310>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x314>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d02b      	beq.n	800122e <HAL_GPIO_Init+0x226>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a51      	ldr	r2, [pc, #324]	; (8001320 <HAL_GPIO_Init+0x318>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d025      	beq.n	800122a <HAL_GPIO_Init+0x222>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a50      	ldr	r2, [pc, #320]	; (8001324 <HAL_GPIO_Init+0x31c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x21e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <HAL_GPIO_Init+0x320>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x21a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4e      	ldr	r2, [pc, #312]	; (800132c <HAL_GPIO_Init+0x324>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x216>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <HAL_GPIO_Init+0x328>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x212>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <HAL_GPIO_Init+0x32c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x20e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <HAL_GPIO_Init+0x330>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x20a>
 800120e:	2307      	movs	r3, #7
 8001210:	e00e      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001212:	2308      	movs	r3, #8
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001216:	2306      	movs	r3, #6
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x310>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_GPIO_Init+0x334>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a32      	ldr	r2, [pc, #200]	; (800133c <HAL_GPIO_Init+0x334>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_GPIO_Init+0x334>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_GPIO_Init+0x334>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_GPIO_Init+0x334>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c6:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_GPIO_Init+0x334>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_GPIO_Init+0x334>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_GPIO_Init+0x334>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae90 	bls.w	8001024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001384:	887a      	ldrh	r2, [r7, #2]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	041a      	lsls	r2, r3, #16
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43d9      	mvns	r1, r3
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	400b      	ands	r3, r1
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e267      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d075      	beq.n	80014b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d00c      	beq.n	80013ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d112      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d05b      	beq.n	80014b0 <HAL_RCC_OscConfig+0x108>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d157      	bne.n	80014b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e242      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x74>
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a75      	ldr	r2, [pc, #468]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x98>
 8001426:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6f      	ldr	r2, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6c      	ldr	r2, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 8001440:	4b69      	ldr	r3, [pc, #420]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a68      	ldr	r2, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fce4 	bl	8000e2c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fce0 	bl	8000e2c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e207      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xc0>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fcd0 	bl	8000e2c <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fccc 	bl	8000e2c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1f3      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b51      	ldr	r3, [pc, #324]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0xe8>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014be:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d11c      	bne.n	8001510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_OscConfig+0x152>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e1c7      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	e03a      	b.n	8001586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_RCC_OscConfig+0x244>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fc85 	bl	8000e2c <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fc81 	bl	8000e2c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e1a8      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4925      	ldr	r1, [pc, #148]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_OscConfig+0x244>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fc64 	bl	8000e2c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff fc60 	bl	8000e2c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e187      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d036      	beq.n	8001600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d016      	beq.n	80015c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_RCC_OscConfig+0x248>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fc44 	bl	8000e2c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fc40 	bl	8000e2c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e167      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80015bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x200>
 80015c6:	e01b      	b.n	8001600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_RCC_OscConfig+0x248>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fc2d 	bl	8000e2c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	e00e      	b.n	80015f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fc29 	bl	8000e2c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d907      	bls.n	80015f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e150      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470000 	.word	0x42470000
 80015f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ea      	bne.n	80015d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8097 	beq.w	800173c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001612:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b77      	ldr	r3, [pc, #476]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164a:	4b74      	ldr	r3, [pc, #464]	; (800181c <HAL_RCC_OscConfig+0x474>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fbe9 	bl	8000e2c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff fbe5 	bl	8000e2c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e10c      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x2ea>
 8001684:	4b64      	ldr	r3, [pc, #400]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a63      	ldr	r2, [pc, #396]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	e01c      	b.n	80016cc <HAL_RCC_OscConfig+0x324>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x30c>
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5e      	ldr	r2, [pc, #376]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0x324>
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a57      	ldr	r2, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
 80016c0:	4b55      	ldr	r3, [pc, #340]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	4a54      	ldr	r2, [pc, #336]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d015      	beq.n	8001700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fbaa 	bl	8000e2c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fba6 	bl	8000e2c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0cb      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f2:	4b49      	ldr	r3, [pc, #292]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ee      	beq.n	80016dc <HAL_RCC_OscConfig+0x334>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fb94 	bl	8000e2c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001706:	e00a      	b.n	800171e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fb90 	bl	8000e2c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e0b5      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ee      	bne.n	8001708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b39      	ldr	r3, [pc, #228]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a1 	beq.w	8001888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b08      	cmp	r3, #8
 8001750:	d05c      	beq.n	800180c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d141      	bne.n	80017de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fb64 	bl	8000e2c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fb60 	bl	8000e2c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e087      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	019b      	lsls	r3, r3, #6
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	491b      	ldr	r1, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb39 	bl	8000e2c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff fb35 	bl	8000e2c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e05c      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x416>
 80017dc:	e054      	b.n	8001888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb22 	bl	8000e2c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fb1e 	bl	8000e2c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e045      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x444>
 800180a:	e03d      	b.n	8001888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e038      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000
 8001820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x4ec>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d028      	beq.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d121      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d11a      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800185a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185c:	4293      	cmp	r3, r2
 800185e:	d111      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	3b01      	subs	r3, #1
 800186e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0cc      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d90c      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0b8      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800190e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	494d      	ldr	r1, [pc, #308]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d044      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d119      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d003      	beq.n	8001956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	2b03      	cmp	r3, #3
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e067      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4934      	ldr	r1, [pc, #208]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7ff fa50 	bl	8000e2c <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff fa4c 	bl	8000e2c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e04f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d20c      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e032      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4916      	ldr	r1, [pc, #88]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490e      	ldr	r1, [pc, #56]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1e:	f000 f821 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	490a      	ldr	r1, [pc, #40]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f8b0 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	40023800 	.word	0x40023800
 8001a58:	08005d20 	.word	0x08005d20
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b094      	sub	sp, #80	; 0x50
 8001a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a70:	2300      	movs	r3, #0
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a74:	2300      	movs	r3, #0
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7c:	4b79      	ldr	r3, [pc, #484]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d00d      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	f200 80e1 	bhi.w	8001c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x34>
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a96:	e0db      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a9c:	e0db      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9e:	4b73      	ldr	r3, [pc, #460]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8001aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aa2:	e0d8      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa4:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aae:	4b6d      	ldr	r3, [pc, #436]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aba:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	099b      	lsrs	r3, r3, #6
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	462b      	mov	r3, r5
 8001ada:	f04f 0000 	mov.w	r0, #0
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	0159      	lsls	r1, r3, #5
 8001ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae8:	0150      	lsls	r0, r2, #5
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4621      	mov	r1, r4
 8001af0:	1a51      	subs	r1, r2, r1
 8001af2:	6139      	str	r1, [r7, #16]
 8001af4:	4629      	mov	r1, r5
 8001af6:	eb63 0301 	sbc.w	r3, r3, r1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b08:	4659      	mov	r1, fp
 8001b0a:	018b      	lsls	r3, r1, #6
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b12:	4651      	mov	r1, sl
 8001b14:	018a      	lsls	r2, r1, #6
 8001b16:	4651      	mov	r1, sl
 8001b18:	ebb2 0801 	subs.w	r8, r2, r1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b36:	4690      	mov	r8, r2
 8001b38:	4699      	mov	r9, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	eb18 0303 	adds.w	r3, r8, r3
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	462b      	mov	r3, r5
 8001b44:	eb49 0303 	adc.w	r3, r9, r3
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b56:	4629      	mov	r1, r5
 8001b58:	024b      	lsls	r3, r1, #9
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b60:	4621      	mov	r1, r4
 8001b62:	024a      	lsls	r2, r1, #9
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b74:	f7fe fb84 	bl	8000280 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b80:	e058      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	f04f 0000 	mov.w	r0, #0
 8001ba4:	f04f 0100 	mov.w	r1, #0
 8001ba8:	0159      	lsls	r1, r3, #5
 8001baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bae:	0150      	lsls	r0, r2, #5
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4641      	mov	r1, r8
 8001bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bba:	4649      	mov	r1, r9
 8001bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	00eb      	lsls	r3, r5, #3
 8001be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bea:	00e2      	lsls	r2, r4, #3
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	4643      	mov	r3, r8
 8001bf2:	18e3      	adds	r3, r4, r3
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	eb45 0303 	adc.w	r3, r5, r3
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	028b      	lsls	r3, r1, #10
 8001c0e:	4621      	mov	r1, r4
 8001c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c14:	4621      	mov	r1, r4
 8001c16:	028a      	lsls	r2, r1, #10
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	61fa      	str	r2, [r7, #28]
 8001c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c28:	f7fe fb2a 	bl	8000280 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4613      	mov	r3, r2
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c4e:	e002      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3750      	adds	r7, #80	; 0x50
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	007a1200 	.word	0x007a1200

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0a9b      	lsrs	r3, r3, #10
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	08005d30 	.word	0x08005d30

08001cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb4:	f7ff ffdc 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0b5b      	lsrs	r3, r3, #13
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08005d30 	.word	0x08005d30

08001cd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCC_GetClockConfig+0x60>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0207 	and.w	r2, r3, #7
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	601a      	str	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e041      	b.n	8001dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f839 	bl	8001dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 f9d8 	bl	8002130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e04e      	b.n	8001ea6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e32:	d01d      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d018      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d111      	bne.n	8001e94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d010      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	e007      	b.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40000c00 	.word	0x40000c00
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40001800 	.word	0x40001800

08001ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0202 	mvn.w	r2, #2
 8001efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8ee 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8e0 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8f1 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0204 	mvn.w	r2, #4
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8c4 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8b6 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8c7 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0208 	mvn.w	r2, #8
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f89a 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f88c 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f89d 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0210 	mvn.w	r2, #16
 8001ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f870 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f862 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f873 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0201 	mvn.w	r2, #1
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe fd20 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b80      	cmp	r3, #128	; 0x80
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d107      	bne.n	8002080 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f902 	bl	8002284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f838 	bl	800211c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0220 	mvn.w	r2, #32
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8cc 	bl	8002270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a40      	ldr	r2, [pc, #256]	; (8002244 <TIM_Base_SetConfig+0x114>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d013      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214e:	d00f      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3d      	ldr	r2, [pc, #244]	; (8002248 <TIM_Base_SetConfig+0x118>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00b      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3c      	ldr	r2, [pc, #240]	; (800224c <TIM_Base_SetConfig+0x11c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3b      	ldr	r2, [pc, #236]	; (8002250 <TIM_Base_SetConfig+0x120>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3a      	ldr	r2, [pc, #232]	; (8002254 <TIM_Base_SetConfig+0x124>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d108      	bne.n	8002182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2f      	ldr	r2, [pc, #188]	; (8002244 <TIM_Base_SetConfig+0x114>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002190:	d027      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <TIM_Base_SetConfig+0x118>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d023      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <TIM_Base_SetConfig+0x11c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <TIM_Base_SetConfig+0x120>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a29      	ldr	r2, [pc, #164]	; (8002254 <TIM_Base_SetConfig+0x124>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d017      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a28      	ldr	r2, [pc, #160]	; (8002258 <TIM_Base_SetConfig+0x128>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <TIM_Base_SetConfig+0x12c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00f      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <TIM_Base_SetConfig+0x130>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a25      	ldr	r2, [pc, #148]	; (8002264 <TIM_Base_SetConfig+0x134>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <TIM_Base_SetConfig+0x138>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d003      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a23      	ldr	r2, [pc, #140]	; (800226c <TIM_Base_SetConfig+0x13c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d108      	bne.n	80021f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <TIM_Base_SetConfig+0x114>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d003      	beq.n	8002228 <TIM_Base_SetConfig+0xf8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <TIM_Base_SetConfig+0x124>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d103      	bne.n	8002230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	615a      	str	r2, [r3, #20]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40010400 	.word	0x40010400
 8002258:	40014000 	.word	0x40014000
 800225c:	40014400 	.word	0x40014400
 8002260:	40014800 	.word	0x40014800
 8002264:	40001800 	.word	0x40001800
 8002268:	40001c00 	.word	0x40001c00
 800226c:	40002000 	.word	0x40002000

08002270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e03f      	b.n	800232a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fc28 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f929 	bl	8002534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b08a      	sub	sp, #40	; 0x28
 8002336:	af02      	add	r7, sp, #8
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	d17c      	bne.n	800244c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_UART_Transmit+0x2c>
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e075      	b.n	800244e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_UART_Transmit+0x3e>
 800236c:	2302      	movs	r3, #2
 800236e:	e06e      	b.n	800244e <HAL_UART_Transmit+0x11c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2221      	movs	r2, #33	; 0x21
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002386:	f7fe fd51 	bl	8000e2c <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	88fa      	ldrh	r2, [r7, #6]
 8002396:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a0:	d108      	bne.n	80023b4 <HAL_UART_Transmit+0x82>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	e003      	b.n	80023bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023c4:	e02a      	b.n	800241c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f840 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e036      	b.n	800244e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10b      	bne.n	80023fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3302      	adds	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e007      	b.n	800240e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1cf      	bne.n	80023c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f810 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b090      	sub	sp, #64	; 0x40
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002466:	e050      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246e:	d04c      	beq.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
 8002476:	f7fe fcd9 	bl	8000e2c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002482:	429a      	cmp	r2, r3
 8002484:	d241      	bcs.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	330c      	adds	r3, #12
 80024a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a6:	637a      	str	r2, [r7, #52]	; 0x34
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e5      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	613b      	str	r3, [r7, #16]
   return(result);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3314      	adds	r3, #20
 80024d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024da:	623a      	str	r2, [r7, #32]
 80024dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024de:	69f9      	ldr	r1, [r7, #28]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e5      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e00f      	b.n	800252a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	429a      	cmp	r2, r3
 8002526:	d09f      	beq.n	8002468 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3740      	adds	r7, #64	; 0x40
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002538:	b0c0      	sub	sp, #256	; 0x100
 800253a:	af00      	add	r7, sp, #0
 800253c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	68d9      	ldr	r1, [r3, #12]
 8002552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	ea40 0301 	orr.w	r3, r0, r1
 800255c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	431a      	orrs	r2, r3
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	431a      	orrs	r2, r3
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800258c:	f021 010c 	bic.w	r1, r1, #12
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800259a:	430b      	orrs	r3, r1
 800259c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800259e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ae:	6999      	ldr	r1, [r3, #24]
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	ea40 0301 	orr.w	r3, r0, r1
 80025ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <UART_SetConfig+0x2cc>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d005      	beq.n	80025d4 <UART_SetConfig+0xa0>
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b8d      	ldr	r3, [pc, #564]	; (8002804 <UART_SetConfig+0x2d0>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d104      	bne.n	80025de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025d4:	f7ff fb6c 	bl	8001cb0 <HAL_RCC_GetPCLK2Freq>
 80025d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025dc:	e003      	b.n	80025e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025de:	f7ff fb53 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 80025e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f0:	f040 810c 	bne.w	800280c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002602:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002606:	4622      	mov	r2, r4
 8002608:	462b      	mov	r3, r5
 800260a:	1891      	adds	r1, r2, r2
 800260c:	65b9      	str	r1, [r7, #88]	; 0x58
 800260e:	415b      	adcs	r3, r3
 8002610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002612:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002616:	4621      	mov	r1, r4
 8002618:	eb12 0801 	adds.w	r8, r2, r1
 800261c:	4629      	mov	r1, r5
 800261e:	eb43 0901 	adc.w	r9, r3, r1
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800262e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002636:	4690      	mov	r8, r2
 8002638:	4699      	mov	r9, r3
 800263a:	4623      	mov	r3, r4
 800263c:	eb18 0303 	adds.w	r3, r8, r3
 8002640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002644:	462b      	mov	r3, r5
 8002646:	eb49 0303 	adc.w	r3, r9, r3
 800264a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800264e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800265a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800265e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002662:	460b      	mov	r3, r1
 8002664:	18db      	adds	r3, r3, r3
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
 8002668:	4613      	mov	r3, r2
 800266a:	eb42 0303 	adc.w	r3, r2, r3
 800266e:	657b      	str	r3, [r7, #84]	; 0x54
 8002670:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002674:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002678:	f7fd fe02 	bl	8000280 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4b61      	ldr	r3, [pc, #388]	; (8002808 <UART_SetConfig+0x2d4>)
 8002682:	fba3 2302 	umull	r2, r3, r3, r2
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	011c      	lsls	r4, r3, #4
 800268a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800268e:	2200      	movs	r2, #0
 8002690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002694:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002698:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800269c:	4642      	mov	r2, r8
 800269e:	464b      	mov	r3, r9
 80026a0:	1891      	adds	r1, r2, r2
 80026a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80026a4:	415b      	adcs	r3, r3
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026ac:	4641      	mov	r1, r8
 80026ae:	eb12 0a01 	adds.w	sl, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb43 0b01 	adc.w	fp, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026cc:	4692      	mov	sl, r2
 80026ce:	469b      	mov	fp, r3
 80026d0:	4643      	mov	r3, r8
 80026d2:	eb1a 0303 	adds.w	r3, sl, r3
 80026d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026da:	464b      	mov	r3, r9
 80026dc:	eb4b 0303 	adc.w	r3, fp, r3
 80026e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026f8:	460b      	mov	r3, r1
 80026fa:	18db      	adds	r3, r3, r3
 80026fc:	643b      	str	r3, [r7, #64]	; 0x40
 80026fe:	4613      	mov	r3, r2
 8002700:	eb42 0303 	adc.w	r3, r2, r3
 8002704:	647b      	str	r3, [r7, #68]	; 0x44
 8002706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800270a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800270e:	f7fd fdb7 	bl	8000280 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4611      	mov	r1, r2
 8002718:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <UART_SetConfig+0x2d4>)
 800271a:	fba3 2301 	umull	r2, r3, r3, r1
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2264      	movs	r2, #100	; 0x64
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	1acb      	subs	r3, r1, r3
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <UART_SetConfig+0x2d4>)
 8002730:	fba3 2302 	umull	r2, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800273c:	441c      	add	r4, r3
 800273e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002742:	2200      	movs	r2, #0
 8002744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002748:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800274c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002750:	4642      	mov	r2, r8
 8002752:	464b      	mov	r3, r9
 8002754:	1891      	adds	r1, r2, r2
 8002756:	63b9      	str	r1, [r7, #56]	; 0x38
 8002758:	415b      	adcs	r3, r3
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002760:	4641      	mov	r1, r8
 8002762:	1851      	adds	r1, r2, r1
 8002764:	6339      	str	r1, [r7, #48]	; 0x30
 8002766:	4649      	mov	r1, r9
 8002768:	414b      	adcs	r3, r1
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002778:	4659      	mov	r1, fp
 800277a:	00cb      	lsls	r3, r1, #3
 800277c:	4651      	mov	r1, sl
 800277e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002782:	4651      	mov	r1, sl
 8002784:	00ca      	lsls	r2, r1, #3
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	4603      	mov	r3, r0
 800278c:	4642      	mov	r2, r8
 800278e:	189b      	adds	r3, r3, r2
 8002790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002794:	464b      	mov	r3, r9
 8002796:	460a      	mov	r2, r1
 8002798:	eb42 0303 	adc.w	r3, r2, r3
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027b4:	460b      	mov	r3, r1
 80027b6:	18db      	adds	r3, r3, r3
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ba:	4613      	mov	r3, r2
 80027bc:	eb42 0303 	adc.w	r3, r2, r3
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027ca:	f7fd fd59 	bl	8000280 <__aeabi_uldivmod>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <UART_SetConfig+0x2d4>)
 80027d4:	fba3 1302 	umull	r1, r3, r3, r2
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	2164      	movs	r1, #100	; 0x64
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	3332      	adds	r3, #50	; 0x32
 80027e6:	4a08      	ldr	r2, [pc, #32]	; (8002808 <UART_SetConfig+0x2d4>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	f003 0207 	and.w	r2, r3, #7
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4422      	add	r2, r4
 80027fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027fc:	e105      	b.n	8002a0a <UART_SetConfig+0x4d6>
 80027fe:	bf00      	nop
 8002800:	40011000 	.word	0x40011000
 8002804:	40011400 	.word	0x40011400
 8002808:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800280c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002810:	2200      	movs	r2, #0
 8002812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002816:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800281a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800281e:	4642      	mov	r2, r8
 8002820:	464b      	mov	r3, r9
 8002822:	1891      	adds	r1, r2, r2
 8002824:	6239      	str	r1, [r7, #32]
 8002826:	415b      	adcs	r3, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800282e:	4641      	mov	r1, r8
 8002830:	1854      	adds	r4, r2, r1
 8002832:	4649      	mov	r1, r9
 8002834:	eb43 0501 	adc.w	r5, r3, r1
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	00eb      	lsls	r3, r5, #3
 8002842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002846:	00e2      	lsls	r2, r4, #3
 8002848:	4614      	mov	r4, r2
 800284a:	461d      	mov	r5, r3
 800284c:	4643      	mov	r3, r8
 800284e:	18e3      	adds	r3, r4, r3
 8002850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002854:	464b      	mov	r3, r9
 8002856:	eb45 0303 	adc.w	r3, r5, r3
 800285a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800286a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800287a:	4629      	mov	r1, r5
 800287c:	008b      	lsls	r3, r1, #2
 800287e:	4621      	mov	r1, r4
 8002880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002884:	4621      	mov	r1, r4
 8002886:	008a      	lsls	r2, r1, #2
 8002888:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800288c:	f7fd fcf8 	bl	8000280 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <UART_SetConfig+0x4e4>)
 8002896:	fba3 2302 	umull	r2, r3, r3, r2
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	011c      	lsls	r4, r3, #4
 800289e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	1891      	adds	r1, r2, r2
 80028b6:	61b9      	str	r1, [r7, #24]
 80028b8:	415b      	adcs	r3, r3
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c0:	4641      	mov	r1, r8
 80028c2:	1851      	adds	r1, r2, r1
 80028c4:	6139      	str	r1, [r7, #16]
 80028c6:	4649      	mov	r1, r9
 80028c8:	414b      	adcs	r3, r1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d8:	4659      	mov	r1, fp
 80028da:	00cb      	lsls	r3, r1, #3
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e2:	4651      	mov	r1, sl
 80028e4:	00ca      	lsls	r2, r1, #3
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	4642      	mov	r2, r8
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028f4:	464b      	mov	r3, r9
 80028f6:	460a      	mov	r2, r1
 80028f8:	eb42 0303 	adc.w	r3, r2, r3
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	67bb      	str	r3, [r7, #120]	; 0x78
 800290a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002918:	4649      	mov	r1, r9
 800291a:	008b      	lsls	r3, r1, #2
 800291c:	4641      	mov	r1, r8
 800291e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002922:	4641      	mov	r1, r8
 8002924:	008a      	lsls	r2, r1, #2
 8002926:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800292a:	f7fd fca9 	bl	8000280 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <UART_SetConfig+0x4e4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	3332      	adds	r3, #50	; 0x32
 8002946:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <UART_SetConfig+0x4e4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002952:	441c      	add	r4, r3
 8002954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002958:	2200      	movs	r2, #0
 800295a:	673b      	str	r3, [r7, #112]	; 0x70
 800295c:	677a      	str	r2, [r7, #116]	; 0x74
 800295e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002962:	4642      	mov	r2, r8
 8002964:	464b      	mov	r3, r9
 8002966:	1891      	adds	r1, r2, r2
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	415b      	adcs	r3, r3
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002972:	4641      	mov	r1, r8
 8002974:	1851      	adds	r1, r2, r1
 8002976:	6039      	str	r1, [r7, #0]
 8002978:	4649      	mov	r1, r9
 800297a:	414b      	adcs	r3, r1
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800298a:	4659      	mov	r1, fp
 800298c:	00cb      	lsls	r3, r1, #3
 800298e:	4651      	mov	r1, sl
 8002990:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002994:	4651      	mov	r1, sl
 8002996:	00ca      	lsls	r2, r1, #3
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	4603      	mov	r3, r0
 800299e:	4642      	mov	r2, r8
 80029a0:	189b      	adds	r3, r3, r2
 80029a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029a4:	464b      	mov	r3, r9
 80029a6:	460a      	mov	r2, r1
 80029a8:	eb42 0303 	adc.w	r3, r2, r3
 80029ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	663b      	str	r3, [r7, #96]	; 0x60
 80029b8:	667a      	str	r2, [r7, #100]	; 0x64
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029c6:	4649      	mov	r1, r9
 80029c8:	008b      	lsls	r3, r1, #2
 80029ca:	4641      	mov	r1, r8
 80029cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d0:	4641      	mov	r1, r8
 80029d2:	008a      	lsls	r2, r1, #2
 80029d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029d8:	f7fd fc52 	bl	8000280 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <UART_SetConfig+0x4e4>)
 80029e2:	fba3 1302 	umull	r1, r3, r3, r2
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2164      	movs	r1, #100	; 0x64
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	3332      	adds	r3, #50	; 0x32
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <UART_SetConfig+0x4e4>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	f003 020f 	and.w	r2, r3, #15
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4422      	add	r2, r4
 8002a08:	609a      	str	r2, [r3, #8]
}
 8002a0a:	bf00      	nop
 8002a0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a10:	46bd      	mov	sp, r7
 8002a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a16:	bf00      	nop
 8002a18:	51eb851f 	.word	0x51eb851f

08002a1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f103 0208 	add.w	r2, r3, #8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f103 0208 	add.w	r2, r3, #8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f103 0208 	add.w	r2, r3, #8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d103      	bne.n	8002ade <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e00c      	b.n	8002af8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e002      	b.n	8002aec <vListInsert+0x2e>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d2f6      	bcs.n	8002ae6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6852      	ldr	r2, [r2, #4]
 8002b50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d103      	bne.n	8002b64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bae:	f002 f899 	bl	8004ce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	441a      	add	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	3b01      	subs	r3, #1
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	441a      	add	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	22ff      	movs	r2, #255	; 0xff
 8002bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d114      	bne.n	8002c2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01a      	beq.n	8002c42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3310      	adds	r3, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f841 	bl	8003c98 <xTaskRemoveFromEventList>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <xQueueGenericReset+0xcc>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	e009      	b.n	8002c42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3310      	adds	r3, #16
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fef2 	bl	8002a1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3324      	adds	r3, #36	; 0x24
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff feed 	bl	8002a1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c42:	f002 f87f 	bl	8004d44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	e000ed04 	.word	0xe000ed04

08002c54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	613b      	str	r3, [r7, #16]
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e004      	b.n	8002c94 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3350      	adds	r3, #80	; 0x50
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 f945 	bl	8004f28 <pvPortMalloc>
 8002c9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	3350      	adds	r3, #80	; 0x50
 8002cae:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb0:	79fa      	ldrb	r2, [r7, #7]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f805 	bl	8002ccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
	}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e002      	b.n	8002cee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	69b8      	ldr	r0, [r7, #24]
 8002cfe:	f7ff ff41 	bl	8002b84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	; 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <xQueueGenericSend+0x32>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <xQueueGenericSend+0x40>
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <xQueueGenericSend+0x44>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <xQueueGenericSend+0x46>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xQueueGenericSend+0x60>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSend+0x6e>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericSend+0x72>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericSend+0x74>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da2:	f001 f915 	bl	8003fd0 <xTaskGetSchedulerState>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <xQueueGenericSend+0x9e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <xQueueGenericSend+0xa2>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueGenericSend+0xa4>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	61fb      	str	r3, [r7, #28]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dd2:	f001 ff87 	bl	8004ce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <xQueueGenericSend+0xd4>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d129      	bne.n	8002e3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dee:	f000 fa07 	bl	8003200 <prvCopyDataToQueue>
 8002df2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	3324      	adds	r3, #36	; 0x24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 ff49 	bl	8003c98 <xTaskRemoveFromEventList>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d013      	beq.n	8002e34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e0c:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	e00a      	b.n	8002e34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e34:	f001 ff86 	bl	8004d44 <vPortExitCritical>
				return pdPASS;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e063      	b.n	8002f04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e42:	f001 ff7f 	bl	8004d44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e05c      	b.n	8002f04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 ff81 	bl	8003d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e5e:	f001 ff71 	bl	8004d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e62:	f000 fcfb 	bl	800385c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e66:	f001 ff3d 	bl	8004ce4 <vPortEnterCritical>
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d103      	bne.n	8002e80 <xQueueGenericSend+0x16c>
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d103      	bne.n	8002e96 <xQueueGenericSend+0x182>
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e96:	f001 ff55 	bl	8004d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e9a:	1d3a      	adds	r2, r7, #4
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 ff70 	bl	8003d88 <xTaskCheckForTimeOut>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d124      	bne.n	8002ef8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb0:	f000 fa9e 	bl	80033f0 <prvIsQueueFull>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d018      	beq.n	8002eec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fe98 	bl	8003bf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eca:	f000 fa29 	bl	8003320 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ece:	f000 fcd3 	bl	8003878 <xTaskResumeAll>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f af7c 	bne.w	8002dd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	e772      	b.n	8002dd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eee:	f000 fa17 	bl	8003320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ef2:	f000 fcc1 	bl	8003878 <xTaskResumeAll>
 8002ef6:	e76c      	b.n	8002dd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efa:	f000 fa11 	bl	8003320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002efe:	f000 fcbb 	bl	8003878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3738      	adds	r7, #56	; 0x38
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08e      	sub	sp, #56	; 0x38
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <xQueueGenericSendFromISR+0x3c>
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <xQueueGenericSendFromISR+0x40>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <xQueueGenericSendFromISR+0x42>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	623b      	str	r3, [r7, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d103      	bne.n	8002f7a <xQueueGenericSendFromISR+0x6a>
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <xQueueGenericSendFromISR+0x6e>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueGenericSendFromISR+0x70>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	61fb      	str	r3, [r7, #28]
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f9a:	f001 ff85 	bl	8004ea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	61ba      	str	r2, [r7, #24]
 8002fb4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <xQueueGenericSendFromISR+0xbc>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d12c      	bne.n	8003026 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fdc:	f000 f910 	bl	8003200 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fe0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d112      	bne.n	8003010 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	3324      	adds	r3, #36	; 0x24
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fe4e 	bl	8003c98 <xTaskRemoveFromEventList>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00e      	beq.n	8003020 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e007      	b.n	8003020 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003014:	3301      	adds	r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	b25a      	sxtb	r2, r3
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003020:	2301      	movs	r3, #1
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003024:	e001      	b.n	800302a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003026:	2300      	movs	r3, #0
 8003028:	637b      	str	r3, [r7, #52]	; 0x34
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003034:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003038:	4618      	mov	r0, r3
 800303a:	3738      	adds	r7, #56	; 0x38
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08c      	sub	sp, #48	; 0x30
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <xQueueReceive+0x30>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	623b      	str	r3, [r7, #32]
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <xQueueReceive+0x3e>
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <xQueueReceive+0x42>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <xQueueReceive+0x44>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <xQueueReceive+0x5e>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	61fb      	str	r3, [r7, #28]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800309e:	f000 ff97 	bl	8003fd0 <xTaskGetSchedulerState>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <xQueueReceive+0x6e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <xQueueReceive+0x72>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueReceive+0x74>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <xQueueReceive+0x8e>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	61bb      	str	r3, [r7, #24]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ce:	f001 fe09 	bl	8004ce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01f      	beq.n	800311e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e2:	f000 f8f7 	bl	80032d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00f      	beq.n	8003116 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	3310      	adds	r3, #16
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fdcc 	bl	8003c98 <xTaskRemoveFromEventList>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <xQueueReceive+0x1bc>)
 8003108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003116:	f001 fe15 	bl	8004d44 <vPortExitCritical>
				return pdPASS;
 800311a:	2301      	movs	r3, #1
 800311c:	e069      	b.n	80031f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003124:	f001 fe0e 	bl	8004d44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003128:	2300      	movs	r3, #0
 800312a:	e062      	b.n	80031f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fe10 	bl	8003d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003140:	f001 fe00 	bl	8004d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003144:	f000 fb8a 	bl	800385c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003148:	f001 fdcc 	bl	8004ce4 <vPortEnterCritical>
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003152:	b25b      	sxtb	r3, r3
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d103      	bne.n	8003162 <xQueueReceive+0x122>
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003168:	b25b      	sxtb	r3, r3
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d103      	bne.n	8003178 <xQueueReceive+0x138>
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003178:	f001 fde4 	bl	8004d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800317c:	1d3a      	adds	r2, r7, #4
 800317e:	f107 0310 	add.w	r3, r7, #16
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fdff 	bl	8003d88 <xTaskCheckForTimeOut>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d123      	bne.n	80031d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003192:	f000 f917 	bl	80033c4 <prvIsQueueEmpty>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d017      	beq.n	80031cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	3324      	adds	r3, #36	; 0x24
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fd27 	bl	8003bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ac:	f000 f8b8 	bl	8003320 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031b0:	f000 fb62 	bl	8003878 <xTaskResumeAll>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d189      	bne.n	80030ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <xQueueReceive+0x1bc>)
 80031bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	e780      	b.n	80030ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ce:	f000 f8a7 	bl	8003320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031d2:	f000 fb51 	bl	8003878 <xTaskResumeAll>
 80031d6:	e77a      	b.n	80030ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031da:	f000 f8a1 	bl	8003320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031de:	f000 fb4b 	bl	8003878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e4:	f000 f8ee 	bl	80033c4 <prvIsQueueEmpty>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f43f af6f 	beq.w	80030ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3730      	adds	r7, #48	; 0x30
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10d      	bne.n	800323a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d14d      	bne.n	80032c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 feee 	bl	800400c <xTaskPriorityDisinherit>
 8003230:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	e043      	b.n	80032c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d119      	bne.n	8003274 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6858      	ldr	r0, [r3, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	461a      	mov	r2, r3
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	f002 f870 	bl	8005330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	441a      	add	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	d32b      	bcc.n	80032c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e026      	b.n	80032c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68d8      	ldr	r0, [r3, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	461a      	mov	r2, r3
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	f002 f856 	bl	8005330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	425b      	negs	r3, r3
 800328e:	441a      	add	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d207      	bcs.n	80032b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	425b      	negs	r3, r3
 80032aa:	441a      	add	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d105      	bne.n	80032c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	3b01      	subs	r3, #1
 80032c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032ca:	697b      	ldr	r3, [r7, #20]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d018      	beq.n	8003318 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	441a      	add	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d303      	bcc.n	8003308 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68d9      	ldr	r1, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	461a      	mov	r2, r3
 8003312:	6838      	ldr	r0, [r7, #0]
 8003314:	f002 f80c 	bl	8005330 <memcpy>
	}
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003328:	f001 fcdc 	bl	8004ce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003332:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003334:	e011      	b.n	800335a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3324      	adds	r3, #36	; 0x24
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fca8 	bl	8003c98 <xTaskRemoveFromEventList>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800334e:	f000 fd7d 	bl	8003e4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	3b01      	subs	r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800335a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	dce9      	bgt.n	8003336 <prvUnlockQueue+0x16>
 8003362:	e000      	b.n	8003366 <prvUnlockQueue+0x46>
					break;
 8003364:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800336e:	f001 fce9 	bl	8004d44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003372:	f001 fcb7 	bl	8004ce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800337c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800337e:	e011      	b.n	80033a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3310      	adds	r3, #16
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fc83 	bl	8003c98 <xTaskRemoveFromEventList>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003398:	f000 fd58 	bl	8003e4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800339c:	7bbb      	ldrb	r3, [r7, #14]
 800339e:	3b01      	subs	r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	dce9      	bgt.n	8003380 <prvUnlockQueue+0x60>
 80033ac:	e000      	b.n	80033b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	22ff      	movs	r2, #255	; 0xff
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033b8:	f001 fcc4 	bl	8004d44 <vPortExitCritical>
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033cc:	f001 fc8a 	bl	8004ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033d8:	2301      	movs	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e001      	b.n	80033e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033e2:	f001 fcaf 	bl	8004d44 <vPortExitCritical>

	return xReturn;
 80033e6:	68fb      	ldr	r3, [r7, #12]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033f8:	f001 fc74 	bl	8004ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	429a      	cmp	r2, r3
 8003406:	d102      	bne.n	800340e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003408:	2301      	movs	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e001      	b.n	8003412 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003412:	f001 fc97 	bl	8004d44 <vPortExitCritical>

	return xReturn;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e014      	b.n	800345a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003430:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <vQueueAddToRegistry+0x50>)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <vQueueAddToRegistry+0x50>)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <vQueueAddToRegistry+0x50>)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003452:	e006      	b.n	8003462 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3301      	adds	r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b07      	cmp	r3, #7
 800345e:	d9e7      	bls.n	8003430 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000124 	.word	0x20000124

08003474 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003484:	f001 fc2e 	bl	8004ce4 <vPortEnterCritical>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800348e:	b25b      	sxtb	r3, r3
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d103      	bne.n	800349e <vQueueWaitForMessageRestricted+0x2a>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d103      	bne.n	80034b4 <vQueueWaitForMessageRestricted+0x40>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b4:	f001 fc46 	bl	8004d44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	3324      	adds	r3, #36	; 0x24
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fbb9 	bl	8003c40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff26 	bl	8003320 <prvUnlockQueue>
	}
 80034d4:	bf00      	nop
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08c      	sub	sp, #48	; 0x30
 80034e0:	af04      	add	r7, sp, #16
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fd19 	bl	8004f28 <pvPortMalloc>
 80034f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00e      	beq.n	800351c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034fe:	2058      	movs	r0, #88	; 0x58
 8003500:	f001 fd12 	bl	8004f28 <pvPortMalloc>
 8003504:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
 8003512:	e005      	b.n	8003520 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003514:	6978      	ldr	r0, [r7, #20]
 8003516:	f001 fdcb 	bl	80050b0 <vPortFree>
 800351a:	e001      	b.n	8003520 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d013      	beq.n	800354e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	2300      	movs	r3, #0
 800352a:	9303      	str	r3, [sp, #12]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	9302      	str	r3, [sp, #8]
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f80e 	bl	800355e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003542:	69f8      	ldr	r0, [r7, #28]
 8003544:	f000 f89a 	bl	800367c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003548:	2301      	movs	r3, #1
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e002      	b.n	8003554 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003554:	69bb      	ldr	r3, [r7, #24]
	}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b088      	sub	sp, #32
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	461a      	mov	r2, r3
 8003576:	21a5      	movs	r1, #165	; 0xa5
 8003578:	f001 fee8 	bl	800534c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003586:	3b01      	subs	r3, #1
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f023 0307 	bic.w	r3, r3, #7
 8003594:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	617b      	str	r3, [r7, #20]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01f      	beq.n	80035fc <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	e012      	b.n	80035e8 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	7819      	ldrb	r1, [r3, #0]
 80035ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	3334      	adds	r3, #52	; 0x34
 80035d2:	460a      	mov	r2, r1
 80035d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3301      	adds	r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b09      	cmp	r3, #9
 80035ec:	d9e9      	bls.n	80035c2 <prvInitialiseNewTask+0x64>
 80035ee:	e000      	b.n	80035f2 <prvInitialiseNewTask+0x94>
			{
				break;
 80035f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035fa:	e003      	b.n	8003604 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	2b0e      	cmp	r3, #14
 8003608:	d901      	bls.n	800360e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800360a:	230e      	movs	r3, #14
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003618:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	2200      	movs	r2, #0
 800361e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	3304      	adds	r3, #4
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fa19 	bl	8002a5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	3318      	adds	r3, #24
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fa14 	bl	8002a5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003638:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	f1c3 020f 	rsb	r2, r3, #15
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003648:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	2200      	movs	r2, #0
 800364e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	69b8      	ldr	r0, [r7, #24]
 800365e:	f001 fa07 	bl	8004a70 <pxPortInitialiseStack>
 8003662:	4602      	mov	r2, r0
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003672:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003674:	bf00      	nop
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003684:	f001 fb2e 	bl	8004ce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003688:	4b2c      	ldr	r3, [pc, #176]	; (800373c <prvAddNewTaskToReadyList+0xc0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	4a2b      	ldr	r2, [pc, #172]	; (800373c <prvAddNewTaskToReadyList+0xc0>)
 8003690:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <prvAddNewTaskToReadyList+0xc4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <prvAddNewTaskToReadyList+0xc4>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036a0:	4b26      	ldr	r3, [pc, #152]	; (800373c <prvAddNewTaskToReadyList+0xc0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d110      	bne.n	80036ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036a8:	f000 fbf4 	bl	8003e94 <prvInitialiseTaskLists>
 80036ac:	e00d      	b.n	80036ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ae:	4b25      	ldr	r3, [pc, #148]	; (8003744 <prvAddNewTaskToReadyList+0xc8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <prvAddNewTaskToReadyList+0xc4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d802      	bhi.n	80036ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036c4:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <prvAddNewTaskToReadyList+0xc4>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036ca:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <prvAddNewTaskToReadyList+0xcc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <prvAddNewTaskToReadyList+0xcc>)
 80036d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <prvAddNewTaskToReadyList+0xcc>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	2201      	movs	r2, #1
 80036e2:	409a      	lsls	r2, r3
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <prvAddNewTaskToReadyList+0xd0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <prvAddNewTaskToReadyList+0xd0>)
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <prvAddNewTaskToReadyList+0xd4>)
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7ff f9b6 	bl	8002a76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800370a:	f001 fb1b 	bl	8004d44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <prvAddNewTaskToReadyList+0xc8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00e      	beq.n	8003734 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <prvAddNewTaskToReadyList+0xc4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	429a      	cmp	r2, r3
 8003722:	d207      	bcs.n	8003734 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <prvAddNewTaskToReadyList+0xd8>)
 8003726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000304 	.word	0x20000304
 8003740:	20000164 	.word	0x20000164
 8003744:	20000310 	.word	0x20000310
 8003748:	20000320 	.word	0x20000320
 800374c:	2000030c 	.word	0x2000030c
 8003750:	20000168 	.word	0x20000168
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <vTaskDelay+0x60>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <vTaskDelay+0x30>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	60bb      	str	r3, [r7, #8]
}
 8003784:	bf00      	nop
 8003786:	e7fe      	b.n	8003786 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003788:	f000 f868 	bl	800385c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800378c:	2100      	movs	r1, #0
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fcc2 	bl	8004118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003794:	f000 f870 	bl	8003878 <xTaskResumeAll>
 8003798:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <vTaskDelay+0x64>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	2000032c 	.word	0x2000032c
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <vTaskStartScheduler+0x84>)
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	2300      	movs	r3, #0
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	2282      	movs	r2, #130	; 0x82
 80037d2:	491d      	ldr	r1, [pc, #116]	; (8003848 <vTaskStartScheduler+0x88>)
 80037d4:	481d      	ldr	r0, [pc, #116]	; (800384c <vTaskStartScheduler+0x8c>)
 80037d6:	f7ff fe81 	bl	80034dc <xTaskCreate>
 80037da:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80037e2:	f000 fe33 	bl	800444c <xTimerCreateTimerTask>
 80037e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d116      	bne.n	800381c <vTaskStartScheduler+0x5c>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60bb      	str	r3, [r7, #8]
}
 8003800:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <vTaskStartScheduler+0x90>)
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <vTaskStartScheduler+0x94>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <vTaskStartScheduler+0x98>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003816:	f001 f9b3 	bl	8004b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800381a:	e00e      	b.n	800383a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d10a      	bne.n	800383a <vTaskStartScheduler+0x7a>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	607b      	str	r3, [r7, #4]
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <vTaskStartScheduler+0x78>
}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000328 	.word	0x20000328
 8003848:	08005c6c 	.word	0x08005c6c
 800384c:	08003e65 	.word	0x08003e65
 8003850:	20000324 	.word	0x20000324
 8003854:	20000310 	.word	0x20000310
 8003858:	20000308 	.word	0x20000308

0800385c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <vTaskSuspendAll+0x18>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a03      	ldr	r2, [pc, #12]	; (8003874 <vTaskSuspendAll+0x18>)
 8003868:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	2000032c 	.word	0x2000032c

08003878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <xTaskResumeAll+0x114>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	603b      	str	r3, [r7, #0]
}
 80038a0:	bf00      	nop
 80038a2:	e7fe      	b.n	80038a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038a4:	f001 fa1e 	bl	8004ce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038a8:	4b38      	ldr	r3, [pc, #224]	; (800398c <xTaskResumeAll+0x114>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	4a37      	ldr	r2, [pc, #220]	; (800398c <xTaskResumeAll+0x114>)
 80038b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <xTaskResumeAll+0x114>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d161      	bne.n	800397e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038ba:	4b35      	ldr	r3, [pc, #212]	; (8003990 <xTaskResumeAll+0x118>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d05d      	beq.n	800397e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038c2:	e02e      	b.n	8003922 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c4:	4b33      	ldr	r3, [pc, #204]	; (8003994 <xTaskResumeAll+0x11c>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3318      	adds	r3, #24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff f92d 	bl	8002b30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3304      	adds	r3, #4
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff f928 	bl	8002b30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2201      	movs	r2, #1
 80038e6:	409a      	lsls	r2, r3
 80038e8:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <xTaskResumeAll+0x120>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <xTaskResumeAll+0x120>)
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4a27      	ldr	r2, [pc, #156]	; (800399c <xTaskResumeAll+0x124>)
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3304      	adds	r3, #4
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f7ff f8b4 	bl	8002a76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <xTaskResumeAll+0x128>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <xTaskResumeAll+0x12c>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <xTaskResumeAll+0x11c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1cc      	bne.n	80038c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003930:	f000 fb2e 	bl	8003f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <xTaskResumeAll+0x130>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003940:	f000 f846 	bl	80039d0 <xTaskIncrementTick>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <xTaskResumeAll+0x12c>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f1      	bne.n	8003940 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <xTaskResumeAll+0x130>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <xTaskResumeAll+0x12c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800396a:	2301      	movs	r3, #1
 800396c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <xTaskResumeAll+0x134>)
 8003970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800397e:	f001 f9e1 	bl	8004d44 <vPortExitCritical>

	return xAlreadyYielded;
 8003982:	68bb      	ldr	r3, [r7, #8]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	2000032c 	.word	0x2000032c
 8003990:	20000304 	.word	0x20000304
 8003994:	200002c4 	.word	0x200002c4
 8003998:	2000030c 	.word	0x2000030c
 800399c:	20000168 	.word	0x20000168
 80039a0:	20000164 	.word	0x20000164
 80039a4:	20000318 	.word	0x20000318
 80039a8:	20000314 	.word	0x20000314
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <xTaskGetTickCount+0x1c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039bc:	687b      	ldr	r3, [r7, #4]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000308 	.word	0x20000308

080039d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039da:	4b4e      	ldr	r3, [pc, #312]	; (8003b14 <xTaskIncrementTick+0x144>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 8088 	bne.w	8003af4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039e4:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <xTaskIncrementTick+0x148>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039ec:	4a4a      	ldr	r2, [pc, #296]	; (8003b18 <xTaskIncrementTick+0x148>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d120      	bne.n	8003a3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039f8:	4b48      	ldr	r3, [pc, #288]	; (8003b1c <xTaskIncrementTick+0x14c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	603b      	str	r3, [r7, #0]
}
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <xTaskIncrementTick+0x46>
 8003a18:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <xTaskIncrementTick+0x14c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <xTaskIncrementTick+0x150>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a3e      	ldr	r2, [pc, #248]	; (8003b1c <xTaskIncrementTick+0x14c>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4a3e      	ldr	r2, [pc, #248]	; (8003b20 <xTaskIncrementTick+0x150>)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <xTaskIncrementTick+0x154>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3301      	adds	r3, #1
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <xTaskIncrementTick+0x154>)
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	f000 faab 	bl	8003f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <xTaskIncrementTick+0x158>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d348      	bcc.n	8003ad6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a44:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <xTaskIncrementTick+0x14c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4e:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <xTaskIncrementTick+0x158>)
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	601a      	str	r2, [r3, #0]
					break;
 8003a56:	e03e      	b.n	8003ad6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a58:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <xTaskIncrementTick+0x14c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d203      	bcs.n	8003a78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a70:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <xTaskIncrementTick+0x158>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a76:	e02e      	b.n	8003ad6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff f857 	bl	8002b30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	3318      	adds	r3, #24
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f84e 	bl	8002b30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	2201      	movs	r2, #1
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <xTaskIncrementTick+0x15c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	4a22      	ldr	r2, [pc, #136]	; (8003b2c <xTaskIncrementTick+0x15c>)
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <xTaskIncrementTick+0x160>)
 8003ab4:	441a      	add	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7fe ffda 	bl	8002a76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <xTaskIncrementTick+0x164>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d3b9      	bcc.n	8003a44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad4:	e7b6      	b.n	8003a44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ad6:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <xTaskIncrementTick+0x164>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	4914      	ldr	r1, [pc, #80]	; (8003b30 <xTaskIncrementTick+0x160>)
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d907      	bls.n	8003afe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e004      	b.n	8003afe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <xTaskIncrementTick+0x168>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <xTaskIncrementTick+0x168>)
 8003afc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <xTaskIncrementTick+0x16c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b0a:	697b      	ldr	r3, [r7, #20]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	2000032c 	.word	0x2000032c
 8003b18:	20000308 	.word	0x20000308
 8003b1c:	200002bc 	.word	0x200002bc
 8003b20:	200002c0 	.word	0x200002c0
 8003b24:	2000031c 	.word	0x2000031c
 8003b28:	20000324 	.word	0x20000324
 8003b2c:	2000030c 	.word	0x2000030c
 8003b30:	20000168 	.word	0x20000168
 8003b34:	20000164 	.word	0x20000164
 8003b38:	20000314 	.word	0x20000314
 8003b3c:	20000318 	.word	0x20000318

08003b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b46:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <vTaskSwitchContext+0xa4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <vTaskSwitchContext+0xa8>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b54:	e03f      	b.n	8003bd6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <vTaskSwitchContext+0xa8>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b5c:	4b23      	ldr	r3, [pc, #140]	; (8003bec <vTaskSwitchContext+0xac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	f1c3 031f 	rsb	r3, r3, #31
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	491f      	ldr	r1, [pc, #124]	; (8003bf0 <vTaskSwitchContext+0xb0>)
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	607b      	str	r3, [r7, #4]
}
 8003b98:	bf00      	nop
 8003b9a:	e7fe      	b.n	8003b9a <vTaskSwitchContext+0x5a>
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <vTaskSwitchContext+0xb0>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d104      	bne.n	8003bcc <vTaskSwitchContext+0x8c>
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <vTaskSwitchContext+0xb4>)
 8003bd4:	6013      	str	r3, [r2, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	2000032c 	.word	0x2000032c
 8003be8:	20000318 	.word	0x20000318
 8003bec:	2000030c 	.word	0x2000030c
 8003bf0:	20000168 	.word	0x20000168
 8003bf4:	20000164 	.word	0x20000164

08003bf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	60fb      	str	r3, [r7, #12]
}
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <vTaskPlaceOnEventList+0x44>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3318      	adds	r3, #24
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fe ff49 	bl	8002abe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f000 fa72 	bl	8004118 <prvAddCurrentTaskToDelayedList>
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000164 	.word	0x20000164

08003c40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	617b      	str	r3, [r7, #20]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c68:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3318      	adds	r3, #24
 8003c6e:	4619      	mov	r1, r3
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7fe ff00 	bl	8002a76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	68b8      	ldr	r0, [r7, #8]
 8003c86:	f000 fa47 	bl	8004118 <prvAddCurrentTaskToDelayedList>
	}
 8003c8a:	bf00      	nop
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000164 	.word	0x20000164

08003c98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	60fb      	str	r3, [r7, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	3318      	adds	r3, #24
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe ff31 	bl	8002b30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <xTaskRemoveFromEventList+0xac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d11c      	bne.n	8003d10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe ff28 	bl	8002b30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <xTaskRemoveFromEventList+0xb0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <xTaskRemoveFromEventList+0xb0>)
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <xTaskRemoveFromEventList+0xb4>)
 8003d00:	441a      	add	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f7fe feb4 	bl	8002a76 <vListInsertEnd>
 8003d0e:	e005      	b.n	8003d1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3318      	adds	r3, #24
 8003d14:	4619      	mov	r1, r3
 8003d16:	480e      	ldr	r0, [pc, #56]	; (8003d50 <xTaskRemoveFromEventList+0xb8>)
 8003d18:	f7fe fead 	bl	8002a76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <xTaskRemoveFromEventList+0xbc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d905      	bls.n	8003d36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <xTaskRemoveFromEventList+0xc0>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e001      	b.n	8003d3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d3a:	697b      	ldr	r3, [r7, #20]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	2000032c 	.word	0x2000032c
 8003d48:	2000030c 	.word	0x2000030c
 8003d4c:	20000168 	.word	0x20000168
 8003d50:	200002c4 	.word	0x200002c4
 8003d54:	20000164 	.word	0x20000164
 8003d58:	20000318 	.word	0x20000318

08003d5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <vTaskInternalSetTimeOutState+0x24>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <vTaskInternalSetTimeOutState+0x28>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	605a      	str	r2, [r3, #4]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	2000031c 	.word	0x2000031c
 8003d84:	20000308 	.word	0x20000308

08003d88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	613b      	str	r3, [r7, #16]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	60fb      	str	r3, [r7, #12]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dca:	f000 ff8b 	bl	8004ce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <xTaskCheckForTimeOut+0xbc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d102      	bne.n	8003dee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e023      	b.n	8003e36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <xTaskCheckForTimeOut+0xc0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d007      	beq.n	8003e0a <xTaskCheckForTimeOut+0x82>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e015      	b.n	8003e36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d20b      	bcs.n	8003e2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1ad2      	subs	r2, r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff9b 	bl	8003d5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e004      	b.n	8003e36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e36:	f000 ff85 	bl	8004d44 <vPortExitCritical>

	return xReturn;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000308 	.word	0x20000308
 8003e48:	2000031c 	.word	0x2000031c

08003e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <vTaskMissedYield+0x14>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	20000318 	.word	0x20000318

08003e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e6c:	f000 f852 	bl	8003f14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <prvIdleTask+0x28>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d9f9      	bls.n	8003e6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <prvIdleTask+0x2c>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e88:	e7f0      	b.n	8003e6c <prvIdleTask+0x8>
 8003e8a:	bf00      	nop
 8003e8c:	20000168 	.word	0x20000168
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	e00c      	b.n	8003eba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <prvInitialiseTaskLists+0x60>)
 8003eac:	4413      	add	r3, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fdb4 	bl	8002a1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b0e      	cmp	r3, #14
 8003ebe:	d9ef      	bls.n	8003ea0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ec0:	480d      	ldr	r0, [pc, #52]	; (8003ef8 <prvInitialiseTaskLists+0x64>)
 8003ec2:	f7fe fdab 	bl	8002a1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ec6:	480d      	ldr	r0, [pc, #52]	; (8003efc <prvInitialiseTaskLists+0x68>)
 8003ec8:	f7fe fda8 	bl	8002a1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ecc:	480c      	ldr	r0, [pc, #48]	; (8003f00 <prvInitialiseTaskLists+0x6c>)
 8003ece:	f7fe fda5 	bl	8002a1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ed2:	480c      	ldr	r0, [pc, #48]	; (8003f04 <prvInitialiseTaskLists+0x70>)
 8003ed4:	f7fe fda2 	bl	8002a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ed8:	480b      	ldr	r0, [pc, #44]	; (8003f08 <prvInitialiseTaskLists+0x74>)
 8003eda:	f7fe fd9f 	bl	8002a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <prvInitialiseTaskLists+0x78>)
 8003ee0:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <prvInitialiseTaskLists+0x64>)
 8003ee2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <prvInitialiseTaskLists+0x7c>)
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <prvInitialiseTaskLists+0x68>)
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000168 	.word	0x20000168
 8003ef8:	20000294 	.word	0x20000294
 8003efc:	200002a8 	.word	0x200002a8
 8003f00:	200002c4 	.word	0x200002c4
 8003f04:	200002d8 	.word	0x200002d8
 8003f08:	200002f0 	.word	0x200002f0
 8003f0c:	200002bc 	.word	0x200002bc
 8003f10:	200002c0 	.word	0x200002c0

08003f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f1a:	e019      	b.n	8003f50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f1c:	f000 fee2 	bl	8004ce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <prvCheckTasksWaitingTermination+0x50>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fdff 	bl	8002b30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <prvCheckTasksWaitingTermination+0x54>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <prvCheckTasksWaitingTermination+0x54>)
 8003f3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <prvCheckTasksWaitingTermination+0x58>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <prvCheckTasksWaitingTermination+0x58>)
 8003f44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f46:	f000 fefd 	bl	8004d44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f810 	bl	8003f70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <prvCheckTasksWaitingTermination+0x58>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e1      	bne.n	8003f1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200002d8 	.word	0x200002d8
 8003f68:	20000304 	.word	0x20000304
 8003f6c:	200002ec 	.word	0x200002ec

08003f70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 f897 	bl	80050b0 <vPortFree>
			vPortFree( pxTCB );
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f001 f894 	bl	80050b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <prvResetNextTaskUnblockTime+0x38>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <prvResetNextTaskUnblockTime+0x3c>)
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fa8:	e008      	b.n	8003fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <prvResetNextTaskUnblockTime+0x38>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <prvResetNextTaskUnblockTime+0x3c>)
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	200002bc 	.word	0x200002bc
 8003fcc:	20000324 	.word	0x20000324

08003fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <xTaskGetSchedulerState+0x34>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	e008      	b.n	8003ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <xTaskGetSchedulerState+0x38>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fec:	2302      	movs	r3, #2
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	e001      	b.n	8003ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ff6:	687b      	ldr	r3, [r7, #4]
	}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	20000310 	.word	0x20000310
 8004008:	2000032c 	.word	0x2000032c

0800400c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d06e      	beq.n	8004100 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004022:	4b3a      	ldr	r3, [pc, #232]	; (800410c <xTaskPriorityDisinherit+0x100>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	429a      	cmp	r2, r3
 800402a:	d00a      	beq.n	8004042 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60fb      	str	r3, [r7, #12]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	60bb      	str	r3, [r7, #8]
}
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	1e5a      	subs	r2, r3, #1
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004072:	429a      	cmp	r2, r3
 8004074:	d044      	beq.n	8004100 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d140      	bne.n	8004100 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	3304      	adds	r3, #4
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fd54 	bl	8002b30 <uxListRemove>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d115      	bne.n	80040ba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	491f      	ldr	r1, [pc, #124]	; (8004110 <xTaskPriorityDisinherit+0x104>)
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xTaskPriorityDisinherit+0xae>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	2201      	movs	r2, #1
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43da      	mvns	r2, r3
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <xTaskPriorityDisinherit+0x108>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4013      	ands	r3, r2
 80040b6:	4a17      	ldr	r2, [pc, #92]	; (8004114 <xTaskPriorityDisinherit+0x108>)
 80040b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	f1c3 020f 	rsb	r2, r3, #15
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	2201      	movs	r2, #1
 80040d4:	409a      	lsls	r2, r3
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <xTaskPriorityDisinherit+0x108>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <xTaskPriorityDisinherit+0x108>)
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4a08      	ldr	r2, [pc, #32]	; (8004110 <xTaskPriorityDisinherit+0x104>)
 80040ee:	441a      	add	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7fe fcbd 	bl	8002a76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004100:	697b      	ldr	r3, [r7, #20]
	}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000164 	.word	0x20000164
 8004110:	20000168 	.word	0x20000168
 8004114:	2000030c 	.word	0x2000030c

08004118 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004122:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004128:	4b28      	ldr	r3, [pc, #160]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3304      	adds	r3, #4
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fcfe 	bl	8002b30 <uxListRemove>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2201      	movs	r2, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4013      	ands	r3, r2
 800414e:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004150:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d10a      	bne.n	8004170 <prvAddCurrentTaskToDelayedList+0x58>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	481a      	ldr	r0, [pc, #104]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800416a:	f7fe fc84 	bl	8002a76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800416e:	e026      	b.n	80041be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004178:	4b14      	ldr	r3, [pc, #80]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d209      	bcs.n	800419c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f7fe fc92 	bl	8002abe <vListInsert>
}
 800419a:	e010      	b.n	80041be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7fe fc88 	bl	8002abe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d202      	bcs.n	80041be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041b8:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6013      	str	r3, [r2, #0]
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000308 	.word	0x20000308
 80041cc:	20000164 	.word	0x20000164
 80041d0:	2000030c 	.word	0x2000030c
 80041d4:	200002f0 	.word	0x200002f0
 80041d8:	200002c0 	.word	0x200002c0
 80041dc:	200002bc 	.word	0x200002bc
 80041e0:	20000324 	.word	0x20000324

080041e4 <TaskMonitor>:
	#endif

#endif

		//Lab 2
		void TaskMonitor(void){
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b0a8      	sub	sp, #160	; 0xa0
 80041e8:	af04      	add	r7, sp, #16
				unsigned portBASE_TYPE  readylength;
				unsigned portBASE_TYPE  blocklength;
				unsigned portBASE_TYPE	overflowlength;
				unsigned portBASE_TYPE	delaylength;
			    	/*running state*/
				pxCurrent = pxCurrentTCB;
 80041ea:	4b8e      	ldr	r3, [pc, #568]	; (8004424 <TaskMonitor+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	67bb      	str	r3, [r7, #120]	; 0x78
				char MonitorTset[100];
				memset(MonitorTset,'\0',sizeof(MonitorTset));
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	2264      	movs	r2, #100	; 0x64
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 f8a8 	bl	800534c <memset>
				sprintf(MonitorTset,"|Name\t|Priority(Base/actual)\t|pxStack\t|pxTopOfStack\t|State |\n\r");
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	498a      	ldr	r1, [pc, #552]	; (8004428 <TaskMonitor+0x244>)
 8004200:	4618      	mov	r0, r3
 8004202:	f001 f8ab 	bl	800535c <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7fb ffe1 	bl	80001d0 <strlen>
 800420e:	4603      	mov	r3, r0
 8004210:	b29a      	uxth	r2, r3
 8004212:	1d39      	adds	r1, r7, #4
 8004214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004218:	4884      	ldr	r0, [pc, #528]	; (800442c <TaskMonitor+0x248>)
 800421a:	f7fe f88a 	bl	8002332 <HAL_UART_Transmit>
				memset(MonitorTset,'\0',sizeof(MonitorTset));
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	2264      	movs	r2, #100	; 0x64
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f001 f891 	bl	800534c <memset>
				/*Ready state*/
					for (int i = 0; i <= 14; i++)
 800422a:	2300      	movs	r3, #0
 800422c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004230:	e063      	b.n	80042fa <TaskMonitor+0x116>
					{
						readylength = listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ i ] ) );
 8004232:	497f      	ldr	r1, [pc, #508]	; (8004430 <TaskMonitor+0x24c>)
 8004234:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	66bb      	str	r3, [r7, #104]	; 0x68
						listitem = listGET_ITEM_OF_HEAD_ENTRY( &( pxReadyTasksLists[ i ] ) );
 8004246:	497a      	ldr	r1, [pc, #488]	; (8004430 <TaskMonitor+0x24c>)
 8004248:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	330c      	adds	r3, #12
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						sprintf(MonitorTset,"%d\n\r",readylength);
 800425e:	1d3b      	adds	r3, r7, #4
 8004260:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004262:	4974      	ldr	r1, [pc, #464]	; (8004434 <TaskMonitor+0x250>)
 8004264:	4618      	mov	r0, r3
 8004266:	f001 f879 	bl	800535c <siprintf>
						for (int j = 0; j < readylength; j++)
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004270:	e037      	b.n	80042e2 <TaskMonitor+0xfe>
						{
							pvowner = listitem->pvOwner;
 8004272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	66fb      	str	r3, [r7, #108]	; 0x6c
							sprintf(MonitorTset,"%s\t\t%d/%d\t\t%x\t%x\tReady\n\r",pvowner->pcTaskName,pvowner->uxBasePriority,pvowner->uxPriority,pvowner->pxStack,pvowner->pxTopOfStack);
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8004280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004282:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800428a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800428c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800428e:	6809      	ldr	r1, [r1, #0]
 8004290:	1d38      	adds	r0, r7, #4
 8004292:	9102      	str	r1, [sp, #8]
 8004294:	9201      	str	r2, [sp, #4]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	462b      	mov	r3, r5
 800429a:	4622      	mov	r2, r4
 800429c:	4966      	ldr	r1, [pc, #408]	; (8004438 <TaskMonitor+0x254>)
 800429e:	f001 f85d 	bl	800535c <siprintf>
							HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fb ff93 	bl	80001d0 <strlen>
 80042aa:	4603      	mov	r3, r0
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	1d39      	adds	r1, r7, #4
 80042b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042b4:	485d      	ldr	r0, [pc, #372]	; (800442c <TaskMonitor+0x248>)
 80042b6:	f7fe f83c 	bl	8002332 <HAL_UART_Transmit>
							memset(MonitorTset,'\0',sizeof(MonitorTset));
 80042ba:	1d3b      	adds	r3, r7, #4
 80042bc:	2264      	movs	r2, #100	; 0x64
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f843 	bl	800534c <memset>
							if (pvowner == pxCurrent)	break;
 80042c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d00f      	beq.n	80042ee <TaskMonitor+0x10a>
							listitem = listitem->pxNext;
 80042ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						for (int j = 0; j < readylength; j++)
 80042d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042dc:	3301      	adds	r3, #1
 80042de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d8c2      	bhi.n	8004272 <TaskMonitor+0x8e>
 80042ec:	e000      	b.n	80042f0 <TaskMonitor+0x10c>
							if (pvowner == pxCurrent)	break;
 80042ee:	bf00      	nop
					for (int i = 0; i <= 14; i++)
 80042f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f4:	3301      	adds	r3, #1
 80042f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042fe:	2b0e      	cmp	r3, #14
 8004300:	dd97      	ble.n	8004232 <TaskMonitor+0x4e>
						}
					}


					/*delay state*/
					delaylength = listCURRENT_LIST_LENGTH( pxDelayedTaskList );
 8004302:	4b4e      	ldr	r3, [pc, #312]	; (800443c <TaskMonitor+0x258>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	677b      	str	r3, [r7, #116]	; 0x74
					listitem = listGET_ITEM_OF_HEAD_ENTRY( pxDelayedTaskList );
 800430a:	4b4c      	ldr	r3, [pc, #304]	; (800443c <TaskMonitor+0x258>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					for (int i = 0; i < delaylength; i++)
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800431a:	e033      	b.n	8004384 <TaskMonitor+0x1a0>
					{
						pvowner = listitem->pvOwner;
 800431c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	66fb      	str	r3, [r7, #108]	; 0x6c
						sprintf(MonitorTset,"%s\t\t%d/%d\t\t%x\t%x\tBlocked\n\r",pvowner->pcTaskName,pvowner->uxBasePriority,pvowner->uxPriority,pvowner->pxStack,pvowner->pxTopOfStack);
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004334:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004336:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004338:	6809      	ldr	r1, [r1, #0]
 800433a:	1d38      	adds	r0, r7, #4
 800433c:	9102      	str	r1, [sp, #8]
 800433e:	9201      	str	r2, [sp, #4]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	462b      	mov	r3, r5
 8004344:	4622      	mov	r2, r4
 8004346:	493e      	ldr	r1, [pc, #248]	; (8004440 <TaskMonitor+0x25c>)
 8004348:	f001 f808 	bl	800535c <siprintf>
						HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 800434c:	1d3b      	adds	r3, r7, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7fb ff3e 	bl	80001d0 <strlen>
 8004354:	4603      	mov	r3, r0
 8004356:	b29a      	uxth	r2, r3
 8004358:	1d39      	adds	r1, r7, #4
 800435a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800435e:	4833      	ldr	r0, [pc, #204]	; (800442c <TaskMonitor+0x248>)
 8004360:	f7fd ffe7 	bl	8002332 <HAL_UART_Transmit>
						memset(MonitorTset,'\0',sizeof(MonitorTset));
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	2264      	movs	r2, #100	; 0x64
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f000 ffee 	bl	800534c <memset>
						listitem = listitem->pxNext;
 8004370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					for (int i = 0; i < delaylength; i++)
 800437a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800437e:	3301      	adds	r3, #1
 8004380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004388:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800438a:	429a      	cmp	r2, r3
 800438c:	d8c6      	bhi.n	800431c <TaskMonitor+0x138>
					}


					/*overflow delay state*/
					overflowlength = listCURRENT_LIST_LENGTH( pxOverflowDelayedTaskList );
 800438e:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <TaskMonitor+0x260>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	673b      	str	r3, [r7, #112]	; 0x70
					listitem = listGET_ITEM_OF_HEAD_ENTRY( pxOverflowDelayedTaskList );
 8004396:	4b2b      	ldr	r3, [pc, #172]	; (8004444 <TaskMonitor+0x260>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					for (int i = 0; i < overflowlength; i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043a4:	e031      	b.n	800440a <TaskMonitor+0x226>
					{
						pvowner = listitem->pvOwner;
 80043a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	66fb      	str	r3, [r7, #108]	; 0x6c
						sprintf(MonitorTset,"%s\t\t%d/%d\t\t%x\t%x\tOverflow\n\r",pvowner->pcTaskName,pvowner->uxBasePriority,pvowner->uxPriority,pvowner->pxStack,pvowner->pxTopOfStack);
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80043b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80043c2:	6809      	ldr	r1, [r1, #0]
 80043c4:	1d38      	adds	r0, r7, #4
 80043c6:	9102      	str	r1, [sp, #8]
 80043c8:	9201      	str	r2, [sp, #4]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	462b      	mov	r3, r5
 80043ce:	4622      	mov	r2, r4
 80043d0:	491d      	ldr	r1, [pc, #116]	; (8004448 <TaskMonitor+0x264>)
 80043d2:	f000 ffc3 	bl	800535c <siprintf>
						HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fb fef9 	bl	80001d0 <strlen>
 80043de:	4603      	mov	r3, r0
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	1d39      	adds	r1, r7, #4
 80043e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043e8:	4810      	ldr	r0, [pc, #64]	; (800442c <TaskMonitor+0x248>)
 80043ea:	f7fd ffa2 	bl	8002332 <HAL_UART_Transmit>
						memset(MonitorTset,'\0',sizeof(MonitorTset));
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	2264      	movs	r2, #100	; 0x64
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 ffa9 	bl	800534c <memset>
								/*...*/
						listitem = listitem->pxNext;
 80043fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					for (int i = 0; i < overflowlength; i++)
 8004404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004406:	3301      	adds	r3, #1
 8004408:	67fb      	str	r3, [r7, #124]	; 0x7c
 800440a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800440c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800440e:	429a      	cmp	r2, r3
 8004410:	d8c9      	bhi.n	80043a6 <TaskMonitor+0x1c2>
					}

					vTaskDelay(1000);
 8004412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004416:	f7ff f99f 	bl	8003758 <vTaskDelay>

		}
 800441a:	bf00      	nop
 800441c:	3790      	adds	r7, #144	; 0x90
 800441e:	46bd      	mov	sp, r7
 8004420:	bdb0      	pop	{r4, r5, r7, pc}
 8004422:	bf00      	nop
 8004424:	20000164 	.word	0x20000164
 8004428:	08005c74 	.word	0x08005c74
 800442c:	20000090 	.word	0x20000090
 8004430:	20000168 	.word	0x20000168
 8004434:	08005cb4 	.word	0x08005cb4
 8004438:	08005cbc 	.word	0x08005cbc
 800443c:	200002bc 	.word	0x200002bc
 8004440:	08005cd8 	.word	0x08005cd8
 8004444:	200002c0 	.word	0x200002c0
 8004448:	08005cf4 	.word	0x08005cf4

0800444c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004456:	f000 fad5 	bl	8004a04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <xTimerCreateTimerTask+0x54>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <xTimerCreateTimerTask+0x58>)
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	2302      	movs	r3, #2
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004470:	490d      	ldr	r1, [pc, #52]	; (80044a8 <xTimerCreateTimerTask+0x5c>)
 8004472:	480e      	ldr	r0, [pc, #56]	; (80044ac <xTimerCreateTimerTask+0x60>)
 8004474:	f7ff f832 	bl	80034dc <xTaskCreate>
 8004478:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	603b      	str	r3, [r7, #0]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004496:	687b      	ldr	r3, [r7, #4]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000360 	.word	0x20000360
 80044a4:	20000364 	.word	0x20000364
 80044a8:	08005d10 	.word	0x08005d10
 80044ac:	080045e5 	.word	0x080045e5

080044b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <xTimerGenericCommand+0x2e>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	623b      	str	r3, [r7, #32]
}
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044de:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <xTimerGenericCommand+0x98>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d02a      	beq.n	800453c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	dc18      	bgt.n	800452a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044f8:	f7ff fd6a 	bl	8003fd0 <xTaskGetSchedulerState>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d109      	bne.n	8004516 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <xTimerGenericCommand+0x98>)
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	f107 0114 	add.w	r1, r7, #20
 800450a:	2300      	movs	r3, #0
 800450c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800450e:	f7fe fc01 	bl	8002d14 <xQueueGenericSend>
 8004512:	6278      	str	r0, [r7, #36]	; 0x24
 8004514:	e012      	b.n	800453c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <xTimerGenericCommand+0x98>)
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	f107 0114 	add.w	r1, r7, #20
 800451e:	2300      	movs	r3, #0
 8004520:	2200      	movs	r2, #0
 8004522:	f7fe fbf7 	bl	8002d14 <xQueueGenericSend>
 8004526:	6278      	str	r0, [r7, #36]	; 0x24
 8004528:	e008      	b.n	800453c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <xTimerGenericCommand+0x98>)
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	f107 0114 	add.w	r1, r7, #20
 8004532:	2300      	movs	r3, #0
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	f7fe fceb 	bl	8002f10 <xQueueGenericSendFromISR>
 800453a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800453e:	4618      	mov	r0, r3
 8004540:	3728      	adds	r7, #40	; 0x28
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000360 	.word	0x20000360

0800454c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <prvProcessExpiredTimer+0x94>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	3304      	adds	r3, #4
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe fae3 	bl	8002b30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d022      	beq.n	80045be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	18d1      	adds	r1, r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	6978      	ldr	r0, [r7, #20]
 8004586:	f000 f8d1 	bl	800472c <prvInsertTimerInActiveList>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01f      	beq.n	80045d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004590:	2300      	movs	r3, #0
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	2100      	movs	r1, #0
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	f7ff ff88 	bl	80044b0 <xTimerGenericCommand>
 80045a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d113      	bne.n	80045d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	6978      	ldr	r0, [r7, #20]
 80045d6:	4798      	blx	r3
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000358 	.word	0x20000358

080045e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 f857 	bl	80046a4 <prvGetNextExpireTime>
 80045f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4619      	mov	r1, r3
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f803 	bl	8004608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004602:	f000 f8d5 	bl	80047b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004606:	e7f1      	b.n	80045ec <prvTimerTask+0x8>

08004608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004612:	f7ff f923 	bl	800385c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004616:	f107 0308 	add.w	r3, r7, #8
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f866 	bl	80046ec <prvSampleTimeNow>
 8004620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d130      	bne.n	800468a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <prvProcessTimerOrBlockTask+0x3c>
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	429a      	cmp	r2, r3
 8004634:	d806      	bhi.n	8004644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004636:	f7ff f91f 	bl	8003878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff85 	bl	800454c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004642:	e024      	b.n	800468e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800464a:	4b13      	ldr	r3, [pc, #76]	; (8004698 <prvProcessTimerOrBlockTask+0x90>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <prvProcessTimerOrBlockTask+0x50>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <prvProcessTimerOrBlockTask+0x52>
 8004658:	2300      	movs	r3, #0
 800465a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <prvProcessTimerOrBlockTask+0x94>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	f7fe ff03 	bl	8003474 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800466e:	f7ff f903 	bl	8003878 <xTaskResumeAll>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <prvProcessTimerOrBlockTask+0x98>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
}
 8004688:	e001      	b.n	800468e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800468a:	f7ff f8f5 	bl	8003878 <xTaskResumeAll>
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000035c 	.word	0x2000035c
 800469c:	20000360 	.word	0x20000360
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <prvGetNextExpireTime+0x44>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <prvGetNextExpireTime+0x16>
 80046b6:	2201      	movs	r2, #1
 80046b8:	e000      	b.n	80046bc <prvGetNextExpireTime+0x18>
 80046ba:	2200      	movs	r2, #0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvGetNextExpireTime+0x44>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e001      	b.n	80046d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046d8:	68fb      	ldr	r3, [r7, #12]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000358 	.word	0x20000358

080046ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046f4:	f7ff f95c 	bl	80039b0 <xTaskGetTickCount>
 80046f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <prvSampleTimeNow+0x3c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	429a      	cmp	r2, r3
 8004702:	d205      	bcs.n	8004710 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004704:	f000 f91a 	bl	800493c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e002      	b.n	8004716 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004716:	4a04      	ldr	r2, [pc, #16]	; (8004728 <prvSampleTimeNow+0x3c>)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800471c:	68fb      	ldr	r3, [r7, #12]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000368 	.word	0x20000368

0800472c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	429a      	cmp	r2, r3
 8004750:	d812      	bhi.n	8004778 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e01b      	b.n	800479e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <prvInsertTimerInActiveList+0x7c>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fe f9a4 	bl	8002abe <vListInsert>
 8004776:	e012      	b.n	800479e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d206      	bcs.n	800478e <prvInsertTimerInActiveList+0x62>
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004788:	2301      	movs	r3, #1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e007      	b.n	800479e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <prvInsertTimerInActiveList+0x80>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fe f990 	bl	8002abe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800479e:	697b      	ldr	r3, [r7, #20]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	2000035c 	.word	0x2000035c
 80047ac:	20000358 	.word	0x20000358

080047b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	; 0x30
 80047b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047b6:	e0ae      	b.n	8004916 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f2c0 80aa 	blt.w	8004914 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	3304      	adds	r3, #4
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe f9ad 	bl	8002b30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff ff87 	bl	80046ec <prvSampleTimeNow>
 80047de:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b09      	cmp	r3, #9
 80047e4:	f200 8097 	bhi.w	8004916 <prvProcessReceivedCommands+0x166>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <prvProcessReceivedCommands+0x40>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004819 	.word	0x08004819
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004819 	.word	0x08004819
 80047fc:	0800488d 	.word	0x0800488d
 8004800:	080048a1 	.word	0x080048a1
 8004804:	080048eb 	.word	0x080048eb
 8004808:	08004819 	.word	0x08004819
 800480c:	08004819 	.word	0x08004819
 8004810:	0800488d 	.word	0x0800488d
 8004814:	080048a1 	.word	0x080048a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	b2da      	uxtb	r2, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	18d1      	adds	r1, r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004838:	f7ff ff78 	bl	800472c <prvInsertTimerInActiveList>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d069      	beq.n	8004916 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004848:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05e      	beq.n	8004916 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	441a      	add	r2, r3
 8004860:	2300      	movs	r3, #0
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2300      	movs	r3, #0
 8004866:	2100      	movs	r1, #0
 8004868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800486a:	f7ff fe21 	bl	80044b0 <xTimerGenericCommand>
 800486e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d14f      	bne.n	8004916 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	61bb      	str	r3, [r7, #24]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800489e:	e03a      	b.n	8004916 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	617b      	str	r3, [r7, #20]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	18d1      	adds	r1, r2, r3
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048e4:	f7ff ff22 	bl	800472c <prvInsertTimerInActiveList>
					break;
 80048e8:	e015      	b.n	8004916 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80048f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048fa:	f000 fbd9 	bl	80050b0 <vPortFree>
 80048fe:	e00a      	b.n	8004916 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	b2da      	uxtb	r2, r3
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004912:	e000      	b.n	8004916 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004914:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <prvProcessReceivedCommands+0x188>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f107 0108 	add.w	r1, r7, #8
 800491e:	2200      	movs	r2, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe fb8d 	bl	8003040 <xQueueReceive>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	f47f af45 	bne.w	80047b8 <prvProcessReceivedCommands+0x8>
	}
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	3728      	adds	r7, #40	; 0x28
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000360 	.word	0x20000360

0800493c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004942:	e048      	b.n	80049d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004944:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <prvSwitchTimerLists+0xc0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494e:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <prvSwitchTimerLists+0xc0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3304      	adds	r3, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe f8e7 	bl	8002b30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02e      	beq.n	80049d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4413      	add	r3, r2
 8004980:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	d90e      	bls.n	80049a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <prvSwitchTimerLists+0xc0>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f7fe f88c 	bl	8002abe <vListInsert>
 80049a6:	e016      	b.n	80049d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049a8:	2300      	movs	r3, #0
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2300      	movs	r3, #0
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	2100      	movs	r1, #0
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff fd7c 	bl	80044b0 <xTimerGenericCommand>
 80049b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	603b      	str	r3, [r7, #0]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049d6:	4b09      	ldr	r3, [pc, #36]	; (80049fc <prvSwitchTimerLists+0xc0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1b1      	bne.n	8004944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <prvSwitchTimerLists+0xc0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <prvSwitchTimerLists+0xc4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <prvSwitchTimerLists+0xc0>)
 80049ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049ee:	4a04      	ldr	r2, [pc, #16]	; (8004a00 <prvSwitchTimerLists+0xc4>)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000358 	.word	0x20000358
 8004a00:	2000035c 	.word	0x2000035c

08004a04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a08:	f000 f96c 	bl	8004ce4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <prvCheckForValidListAndQueue+0x54>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11d      	bne.n	8004a50 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a14:	4811      	ldr	r0, [pc, #68]	; (8004a5c <prvCheckForValidListAndQueue+0x58>)
 8004a16:	f7fe f801 	bl	8002a1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a1a:	4811      	ldr	r0, [pc, #68]	; (8004a60 <prvCheckForValidListAndQueue+0x5c>)
 8004a1c:	f7fd fffe 	bl	8002a1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a20:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <prvCheckForValidListAndQueue+0x60>)
 8004a22:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <prvCheckForValidListAndQueue+0x58>)
 8004a24:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <prvCheckForValidListAndQueue+0x64>)
 8004a28:	4a0d      	ldr	r2, [pc, #52]	; (8004a60 <prvCheckForValidListAndQueue+0x5c>)
 8004a2a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	210c      	movs	r1, #12
 8004a30:	200a      	movs	r0, #10
 8004a32:	f7fe f90f 	bl	8002c54 <xQueueGenericCreate>
 8004a36:	4603      	mov	r3, r0
 8004a38:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <prvCheckForValidListAndQueue+0x54>)
 8004a3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <prvCheckForValidListAndQueue+0x54>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <prvCheckForValidListAndQueue+0x54>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4908      	ldr	r1, [pc, #32]	; (8004a6c <prvCheckForValidListAndQueue+0x68>)
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fce8 	bl	8003420 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a50:	f000 f978 	bl	8004d44 <vPortExitCritical>
}
 8004a54:	bf00      	nop
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000360 	.word	0x20000360
 8004a5c:	20000330 	.word	0x20000330
 8004a60:	20000344 	.word	0x20000344
 8004a64:	20000358 	.word	0x20000358
 8004a68:	2000035c 	.word	0x2000035c
 8004a6c:	08005d18 	.word	0x08005d18

08004a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b04      	subs	r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004aa0:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <pxPortInitialiseStack+0x64>)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3b14      	subs	r3, #20
 8004aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3b04      	subs	r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f06f 0202 	mvn.w	r2, #2
 8004abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b20      	subs	r3, #32
 8004ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	08004ad9 	.word	0x08004ad9

08004ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <prvTaskExitError+0x54>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d00a      	beq.n	8004b02 <prvTaskExitError+0x2a>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60fb      	str	r3, [r7, #12]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <prvTaskExitError+0x28>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	60bb      	str	r3, [r7, #8]
}
 8004b14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b16:	bf00      	nop
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0fc      	beq.n	8004b18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <pxCurrentTCBConst2>)
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	6808      	ldr	r0, [r1, #0]
 8004b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	f380 8809 	msr	PSP, r0
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8811 	msr	BASEPRI, r0
 8004b4a:	4770      	bx	lr
 8004b4c:	f3af 8000 	nop.w

08004b50 <pxCurrentTCBConst2>:
 8004b50:	20000164 	.word	0x20000164
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop

08004b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b58:	4808      	ldr	r0, [pc, #32]	; (8004b7c <prvPortStartFirstTask+0x24>)
 8004b5a:	6800      	ldr	r0, [r0, #0]
 8004b5c:	6800      	ldr	r0, [r0, #0]
 8004b5e:	f380 8808 	msr	MSP, r0
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f380 8814 	msr	CONTROL, r0
 8004b6a:	b662      	cpsie	i
 8004b6c:	b661      	cpsie	f
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	df00      	svc	0
 8004b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b7a:	bf00      	nop
 8004b7c:	e000ed08 	.word	0xe000ed08

08004b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b86:	4b4e      	ldr	r3, [pc, #312]	; (8004cc0 <xPortStartScheduler+0x140>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a4e      	ldr	r2, [pc, #312]	; (8004cc4 <xPortStartScheduler+0x144>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10a      	bne.n	8004ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	61bb      	str	r3, [r7, #24]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ba6:	4b46      	ldr	r3, [pc, #280]	; (8004cc0 <xPortStartScheduler+0x140>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a47      	ldr	r2, [pc, #284]	; (8004cc8 <xPortStartScheduler+0x148>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10a      	bne.n	8004bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	617b      	str	r3, [r7, #20]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bc6:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <xPortStartScheduler+0x14c>)
 8004bc8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	22ff      	movs	r2, #255	; 0xff
 8004bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <xPortStartScheduler+0x150>)
 8004bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bee:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bf4:	e009      	b.n	8004c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bf6:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a35      	ldr	r2, [pc, #212]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d0ef      	beq.n	8004bf6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004c16:	4b2f      	ldr	r3, [pc, #188]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1c3 0307 	rsb	r3, r3, #7
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00a      	beq.n	8004c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	613b      	str	r3, [r7, #16]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c38:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f1c3 0307 	rsb	r3, r3, #7
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d00a      	beq.n	8004c5a <xPortStartScheduler+0xda>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	60fb      	str	r3, [r7, #12]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004c62:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <xPortStartScheduler+0x154>)
 8004c6e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c78:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <xPortStartScheduler+0x158>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <xPortStartScheduler+0x158>)
 8004c7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c82:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c84:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <xPortStartScheduler+0x158>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <xPortStartScheduler+0x158>)
 8004c8a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c8e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c90:	f000 f8dc 	bl	8004e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c94:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <xPortStartScheduler+0x15c>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c9a:	f000 f8fb 	bl	8004e94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <xPortStartScheduler+0x160>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a0f      	ldr	r2, [pc, #60]	; (8004ce0 <xPortStartScheduler+0x160>)
 8004ca4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ca8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004caa:	f7ff ff55 	bl	8004b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cae:	f7fe ff47 	bl	8003b40 <vTaskSwitchContext>
	prvTaskExitError();
 8004cb2:	f7ff ff11 	bl	8004ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	e000ed00 	.word	0xe000ed00
 8004cc4:	410fc271 	.word	0x410fc271
 8004cc8:	410fc270 	.word	0x410fc270
 8004ccc:	e000e400 	.word	0xe000e400
 8004cd0:	2000036c 	.word	0x2000036c
 8004cd4:	20000370 	.word	0x20000370
 8004cd8:	e000ed20 	.word	0xe000ed20
 8004cdc:	2000000c 	.word	0x2000000c
 8004ce0:	e000ef34 	.word	0xe000ef34

08004ce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	607b      	str	r3, [r7, #4]
}
 8004cfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <vPortEnterCritical+0x58>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a0d      	ldr	r2, [pc, #52]	; (8004d3c <vPortEnterCritical+0x58>)
 8004d06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <vPortEnterCritical+0x58>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10f      	bne.n	8004d30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <vPortEnterCritical+0x5c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	603b      	str	r3, [r7, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <vPortEnterCritical+0x4a>
	}
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	2000000c 	.word	0x2000000c
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <vPortExitCritical+0x50>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <vPortExitCritical+0x24>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	607b      	str	r3, [r7, #4]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <vPortExitCritical+0x50>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <vPortExitCritical+0x50>)
 8004d70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d72:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <vPortExitCritical+0x50>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d105      	bne.n	8004d86 <vPortExitCritical+0x42>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f383 8811 	msr	BASEPRI, r3
}
 8004d84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	2000000c 	.word	0x2000000c
	...

08004da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004da0:	f3ef 8009 	mrs	r0, PSP
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <pxCurrentTCBConst>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	f01e 0f10 	tst.w	lr, #16
 8004db0:	bf08      	it	eq
 8004db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	6010      	str	r0, [r2, #0]
 8004dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004dc4:	f380 8811 	msr	BASEPRI, r0
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f7fe feb6 	bl	8003b40 <vTaskSwitchContext>
 8004dd4:	f04f 0000 	mov.w	r0, #0
 8004dd8:	f380 8811 	msr	BASEPRI, r0
 8004ddc:	bc09      	pop	{r0, r3}
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	6808      	ldr	r0, [r1, #0]
 8004de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de6:	f01e 0f10 	tst.w	lr, #16
 8004dea:	bf08      	it	eq
 8004dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004df0:	f380 8809 	msr	PSP, r0
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w

08004e00 <pxCurrentTCBConst>:
 8004e00:	20000164 	.word	0x20000164
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop

08004e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	607b      	str	r3, [r7, #4]
}
 8004e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e22:	f7fe fdd5 	bl	80039d0 <xTaskIncrementTick>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <SysTick_Handler+0x40>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	2300      	movs	r3, #0
 8004e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
}
 8004e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <vPortSetupTimerInterrupt+0x34>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <vPortSetupTimerInterrupt+0x38>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <vPortSetupTimerInterrupt+0x3c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <vPortSetupTimerInterrupt+0x40>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <vPortSetupTimerInterrupt+0x44>)
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e6e:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <vPortSetupTimerInterrupt+0x34>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	e000e010 	.word	0xe000e010
 8004e84:	e000e018 	.word	0xe000e018
 8004e88:	20000000 	.word	0x20000000
 8004e8c:	10624dd3 	.word	0x10624dd3
 8004e90:	e000e014 	.word	0xe000e014

08004e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ea4 <vPortEnableVFP+0x10>
 8004e98:	6801      	ldr	r1, [r0, #0]
 8004e9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e9e:	6001      	str	r1, [r0, #0]
 8004ea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ea2:	bf00      	nop
 8004ea4:	e000ed88 	.word	0xe000ed88

08004ea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004eae:	f3ef 8305 	mrs	r3, IPSR
 8004eb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b0f      	cmp	r3, #15
 8004eb8:	d914      	bls.n	8004ee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <vPortValidateInterruptPriority+0x70>)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <vPortValidateInterruptPriority+0x74>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	7afa      	ldrb	r2, [r7, #11]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d20a      	bcs.n	8004ee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <vPortValidateInterruptPriority+0x78>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <vPortValidateInterruptPriority+0x7c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d90a      	bls.n	8004f0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	603b      	str	r3, [r7, #0]
}
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <vPortValidateInterruptPriority+0x60>
	}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000e3f0 	.word	0xe000e3f0
 8004f1c:	2000036c 	.word	0x2000036c
 8004f20:	e000ed0c 	.word	0xe000ed0c
 8004f24:	20000370 	.word	0x20000370

08004f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f34:	f7fe fc92 	bl	800385c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f38:	4b58      	ldr	r3, [pc, #352]	; (800509c <pvPortMalloc+0x174>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f40:	f000 f910 	bl	8005164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f44:	4b56      	ldr	r3, [pc, #344]	; (80050a0 <pvPortMalloc+0x178>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 808e 	bne.w	800506e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01d      	beq.n	8004f94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f58:	2208      	movs	r2, #8
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d014      	beq.n	8004f94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f023 0307 	bic.w	r3, r3, #7
 8004f70:	3308      	adds	r3, #8
 8004f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <pvPortMalloc+0x6c>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	617b      	str	r3, [r7, #20]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d069      	beq.n	800506e <pvPortMalloc+0x146>
 8004f9a:	4b42      	ldr	r3, [pc, #264]	; (80050a4 <pvPortMalloc+0x17c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d864      	bhi.n	800506e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fa4:	4b40      	ldr	r3, [pc, #256]	; (80050a8 <pvPortMalloc+0x180>)
 8004fa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fa8:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <pvPortMalloc+0x180>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fae:	e004      	b.n	8004fba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d903      	bls.n	8004fcc <pvPortMalloc+0xa4>
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f1      	bne.n	8004fb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fcc:	4b33      	ldr	r3, [pc, #204]	; (800509c <pvPortMalloc+0x174>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d04b      	beq.n	800506e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2208      	movs	r2, #8
 8004fdc:	4413      	add	r3, r2
 8004fde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d91f      	bls.n	8005038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <pvPortMalloc+0xf8>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	613b      	str	r3, [r7, #16]
}
 800501c:	bf00      	nop
 800501e:	e7fe      	b.n	800501e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005032:	69b8      	ldr	r0, [r7, #24]
 8005034:	f000 f8f8 	bl	8005228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005038:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <pvPortMalloc+0x17c>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <pvPortMalloc+0x17c>)
 8005044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005046:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <pvPortMalloc+0x17c>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <pvPortMalloc+0x184>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d203      	bcs.n	800505a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005052:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <pvPortMalloc+0x17c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <pvPortMalloc+0x184>)
 8005058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <pvPortMalloc+0x178>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	431a      	orrs	r2, r3
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800506e:	f7fe fc03 	bl	8003878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <pvPortMalloc+0x16a>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60fb      	str	r3, [r7, #12]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <pvPortMalloc+0x168>
	return pvReturn;
 8005092:	69fb      	ldr	r3, [r7, #28]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3728      	adds	r7, #40	; 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20012f7c 	.word	0x20012f7c
 80050a0:	20012f88 	.word	0x20012f88
 80050a4:	20012f80 	.word	0x20012f80
 80050a8:	20012f74 	.word	0x20012f74
 80050ac:	20012f84 	.word	0x20012f84

080050b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d048      	beq.n	8005154 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050c2:	2308      	movs	r3, #8
 80050c4:	425b      	negs	r3, r3
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4413      	add	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	4b21      	ldr	r3, [pc, #132]	; (800515c <vPortFree+0xac>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4013      	ands	r3, r2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <vPortFree+0x44>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60fb      	str	r3, [r7, #12]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <vPortFree+0x62>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60bb      	str	r3, [r7, #8]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <vPortFree+0xac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d019      	beq.n	8005154 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d115      	bne.n	8005154 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <vPortFree+0xac>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	43db      	mvns	r3, r3
 8005132:	401a      	ands	r2, r3
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005138:	f7fe fb90 	bl	800385c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vPortFree+0xb0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4413      	add	r3, r2
 8005146:	4a06      	ldr	r2, [pc, #24]	; (8005160 <vPortFree+0xb0>)
 8005148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800514a:	6938      	ldr	r0, [r7, #16]
 800514c:	f000 f86c 	bl	8005228 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005150:	f7fe fb92 	bl	8003878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005154:	bf00      	nop
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20012f88 	.word	0x20012f88
 8005160:	20012f80 	.word	0x20012f80

08005164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800516a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800516e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <prvHeapInit+0xac>)
 8005172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3307      	adds	r3, #7
 8005182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <prvHeapInit+0xac>)
 8005194:	4413      	add	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <prvHeapInit+0xb0>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <prvHeapInit+0xb0>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051b0:	2208      	movs	r2, #8
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <prvHeapInit+0xb4>)
 80051c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <prvHeapInit+0xb4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ce:	4b12      	ldr	r3, [pc, #72]	; (8005218 <prvHeapInit+0xb4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvHeapInit+0xb4>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4a0a      	ldr	r2, [pc, #40]	; (800521c <prvHeapInit+0xb8>)
 80051f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <prvHeapInit+0xbc>)
 80051fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <prvHeapInit+0xc0>)
 80051fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000374 	.word	0x20000374
 8005214:	20012f74 	.word	0x20012f74
 8005218:	20012f7c 	.word	0x20012f7c
 800521c:	20012f84 	.word	0x20012f84
 8005220:	20012f80 	.word	0x20012f80
 8005224:	20012f88 	.word	0x20012f88

08005228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005230:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <prvInsertBlockIntoFreeList+0xac>)
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e002      	b.n	800523c <prvInsertBlockIntoFreeList+0x14>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d8f7      	bhi.n	8005236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d108      	bne.n	800526a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	441a      	add	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d118      	bne.n	80052b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d00d      	beq.n	80052a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e008      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <prvInsertBlockIntoFreeList+0xb0>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e003      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d002      	beq.n	80052c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20012f74 	.word	0x20012f74
 80052d8:	20012f7c 	.word	0x20012f7c

080052dc <__errno>:
 80052dc:	4b01      	ldr	r3, [pc, #4]	; (80052e4 <__errno+0x8>)
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000010 	.word	0x20000010

080052e8 <__libc_init_array>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4d0d      	ldr	r5, [pc, #52]	; (8005320 <__libc_init_array+0x38>)
 80052ec:	4c0d      	ldr	r4, [pc, #52]	; (8005324 <__libc_init_array+0x3c>)
 80052ee:	1b64      	subs	r4, r4, r5
 80052f0:	10a4      	asrs	r4, r4, #2
 80052f2:	2600      	movs	r6, #0
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	d109      	bne.n	800530c <__libc_init_array+0x24>
 80052f8:	4d0b      	ldr	r5, [pc, #44]	; (8005328 <__libc_init_array+0x40>)
 80052fa:	4c0c      	ldr	r4, [pc, #48]	; (800532c <__libc_init_array+0x44>)
 80052fc:	f000 fc8e 	bl	8005c1c <_init>
 8005300:	1b64      	subs	r4, r4, r5
 8005302:	10a4      	asrs	r4, r4, #2
 8005304:	2600      	movs	r6, #0
 8005306:	42a6      	cmp	r6, r4
 8005308:	d105      	bne.n	8005316 <__libc_init_array+0x2e>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005310:	4798      	blx	r3
 8005312:	3601      	adds	r6, #1
 8005314:	e7ee      	b.n	80052f4 <__libc_init_array+0xc>
 8005316:	f855 3b04 	ldr.w	r3, [r5], #4
 800531a:	4798      	blx	r3
 800531c:	3601      	adds	r6, #1
 800531e:	e7f2      	b.n	8005306 <__libc_init_array+0x1e>
 8005320:	08005d74 	.word	0x08005d74
 8005324:	08005d74 	.word	0x08005d74
 8005328:	08005d74 	.word	0x08005d74
 800532c:	08005d78 	.word	0x08005d78

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005346:	4291      	cmp	r1, r2
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <memset>:
 800534c:	4402      	add	r2, r0
 800534e:	4603      	mov	r3, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <siprintf>:
 800535c:	b40e      	push	{r1, r2, r3}
 800535e:	b500      	push	{lr}
 8005360:	b09c      	sub	sp, #112	; 0x70
 8005362:	ab1d      	add	r3, sp, #116	; 0x74
 8005364:	9002      	str	r0, [sp, #8]
 8005366:	9006      	str	r0, [sp, #24]
 8005368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800536c:	4809      	ldr	r0, [pc, #36]	; (8005394 <siprintf+0x38>)
 800536e:	9107      	str	r1, [sp, #28]
 8005370:	9104      	str	r1, [sp, #16]
 8005372:	4909      	ldr	r1, [pc, #36]	; (8005398 <siprintf+0x3c>)
 8005374:	f853 2b04 	ldr.w	r2, [r3], #4
 8005378:	9105      	str	r1, [sp, #20]
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	a902      	add	r1, sp, #8
 8005380:	f000 f868 	bl	8005454 <_svfiprintf_r>
 8005384:	9b02      	ldr	r3, [sp, #8]
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	b01c      	add	sp, #112	; 0x70
 800538c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005390:	b003      	add	sp, #12
 8005392:	4770      	bx	lr
 8005394:	20000010 	.word	0x20000010
 8005398:	ffff0208 	.word	0xffff0208

0800539c <__ssputs_r>:
 800539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	688e      	ldr	r6, [r1, #8]
 80053a2:	429e      	cmp	r6, r3
 80053a4:	4682      	mov	sl, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	4690      	mov	r8, r2
 80053aa:	461f      	mov	r7, r3
 80053ac:	d838      	bhi.n	8005420 <__ssputs_r+0x84>
 80053ae:	898a      	ldrh	r2, [r1, #12]
 80053b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053b4:	d032      	beq.n	800541c <__ssputs_r+0x80>
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	6909      	ldr	r1, [r1, #16]
 80053ba:	eba5 0901 	sub.w	r9, r5, r1
 80053be:	6965      	ldr	r5, [r4, #20]
 80053c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053c8:	3301      	adds	r3, #1
 80053ca:	444b      	add	r3, r9
 80053cc:	106d      	asrs	r5, r5, #1
 80053ce:	429d      	cmp	r5, r3
 80053d0:	bf38      	it	cc
 80053d2:	461d      	movcc	r5, r3
 80053d4:	0553      	lsls	r3, r2, #21
 80053d6:	d531      	bpl.n	800543c <__ssputs_r+0xa0>
 80053d8:	4629      	mov	r1, r5
 80053da:	f000 fb55 	bl	8005a88 <_malloc_r>
 80053de:	4606      	mov	r6, r0
 80053e0:	b950      	cbnz	r0, 80053f8 <__ssputs_r+0x5c>
 80053e2:	230c      	movs	r3, #12
 80053e4:	f8ca 3000 	str.w	r3, [sl]
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ee:	81a3      	strh	r3, [r4, #12]
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f8:	6921      	ldr	r1, [r4, #16]
 80053fa:	464a      	mov	r2, r9
 80053fc:	f7ff ff98 	bl	8005330 <memcpy>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	6126      	str	r6, [r4, #16]
 800540e:	6165      	str	r5, [r4, #20]
 8005410:	444e      	add	r6, r9
 8005412:	eba5 0509 	sub.w	r5, r5, r9
 8005416:	6026      	str	r6, [r4, #0]
 8005418:	60a5      	str	r5, [r4, #8]
 800541a:	463e      	mov	r6, r7
 800541c:	42be      	cmp	r6, r7
 800541e:	d900      	bls.n	8005422 <__ssputs_r+0x86>
 8005420:	463e      	mov	r6, r7
 8005422:	6820      	ldr	r0, [r4, #0]
 8005424:	4632      	mov	r2, r6
 8005426:	4641      	mov	r1, r8
 8005428:	f000 faa8 	bl	800597c <memmove>
 800542c:	68a3      	ldr	r3, [r4, #8]
 800542e:	1b9b      	subs	r3, r3, r6
 8005430:	60a3      	str	r3, [r4, #8]
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	4433      	add	r3, r6
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	2000      	movs	r0, #0
 800543a:	e7db      	b.n	80053f4 <__ssputs_r+0x58>
 800543c:	462a      	mov	r2, r5
 800543e:	f000 fb97 	bl	8005b70 <_realloc_r>
 8005442:	4606      	mov	r6, r0
 8005444:	2800      	cmp	r0, #0
 8005446:	d1e1      	bne.n	800540c <__ssputs_r+0x70>
 8005448:	6921      	ldr	r1, [r4, #16]
 800544a:	4650      	mov	r0, sl
 800544c:	f000 fab0 	bl	80059b0 <_free_r>
 8005450:	e7c7      	b.n	80053e2 <__ssputs_r+0x46>
	...

08005454 <_svfiprintf_r>:
 8005454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005458:	4698      	mov	r8, r3
 800545a:	898b      	ldrh	r3, [r1, #12]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	b09d      	sub	sp, #116	; 0x74
 8005460:	4607      	mov	r7, r0
 8005462:	460d      	mov	r5, r1
 8005464:	4614      	mov	r4, r2
 8005466:	d50e      	bpl.n	8005486 <_svfiprintf_r+0x32>
 8005468:	690b      	ldr	r3, [r1, #16]
 800546a:	b963      	cbnz	r3, 8005486 <_svfiprintf_r+0x32>
 800546c:	2140      	movs	r1, #64	; 0x40
 800546e:	f000 fb0b 	bl	8005a88 <_malloc_r>
 8005472:	6028      	str	r0, [r5, #0]
 8005474:	6128      	str	r0, [r5, #16]
 8005476:	b920      	cbnz	r0, 8005482 <_svfiprintf_r+0x2e>
 8005478:	230c      	movs	r3, #12
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	e0d1      	b.n	8005626 <_svfiprintf_r+0x1d2>
 8005482:	2340      	movs	r3, #64	; 0x40
 8005484:	616b      	str	r3, [r5, #20]
 8005486:	2300      	movs	r3, #0
 8005488:	9309      	str	r3, [sp, #36]	; 0x24
 800548a:	2320      	movs	r3, #32
 800548c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005490:	f8cd 800c 	str.w	r8, [sp, #12]
 8005494:	2330      	movs	r3, #48	; 0x30
 8005496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005640 <_svfiprintf_r+0x1ec>
 800549a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800549e:	f04f 0901 	mov.w	r9, #1
 80054a2:	4623      	mov	r3, r4
 80054a4:	469a      	mov	sl, r3
 80054a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054aa:	b10a      	cbz	r2, 80054b0 <_svfiprintf_r+0x5c>
 80054ac:	2a25      	cmp	r2, #37	; 0x25
 80054ae:	d1f9      	bne.n	80054a4 <_svfiprintf_r+0x50>
 80054b0:	ebba 0b04 	subs.w	fp, sl, r4
 80054b4:	d00b      	beq.n	80054ce <_svfiprintf_r+0x7a>
 80054b6:	465b      	mov	r3, fp
 80054b8:	4622      	mov	r2, r4
 80054ba:	4629      	mov	r1, r5
 80054bc:	4638      	mov	r0, r7
 80054be:	f7ff ff6d 	bl	800539c <__ssputs_r>
 80054c2:	3001      	adds	r0, #1
 80054c4:	f000 80aa 	beq.w	800561c <_svfiprintf_r+0x1c8>
 80054c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ca:	445a      	add	r2, fp
 80054cc:	9209      	str	r2, [sp, #36]	; 0x24
 80054ce:	f89a 3000 	ldrb.w	r3, [sl]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80a2 	beq.w	800561c <_svfiprintf_r+0x1c8>
 80054d8:	2300      	movs	r3, #0
 80054da:	f04f 32ff 	mov.w	r2, #4294967295
 80054de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e2:	f10a 0a01 	add.w	sl, sl, #1
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	9307      	str	r3, [sp, #28]
 80054ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054ee:	931a      	str	r3, [sp, #104]	; 0x68
 80054f0:	4654      	mov	r4, sl
 80054f2:	2205      	movs	r2, #5
 80054f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f8:	4851      	ldr	r0, [pc, #324]	; (8005640 <_svfiprintf_r+0x1ec>)
 80054fa:	f7fa fe71 	bl	80001e0 <memchr>
 80054fe:	9a04      	ldr	r2, [sp, #16]
 8005500:	b9d8      	cbnz	r0, 800553a <_svfiprintf_r+0xe6>
 8005502:	06d0      	lsls	r0, r2, #27
 8005504:	bf44      	itt	mi
 8005506:	2320      	movmi	r3, #32
 8005508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800550c:	0711      	lsls	r1, r2, #28
 800550e:	bf44      	itt	mi
 8005510:	232b      	movmi	r3, #43	; 0x2b
 8005512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005516:	f89a 3000 	ldrb.w	r3, [sl]
 800551a:	2b2a      	cmp	r3, #42	; 0x2a
 800551c:	d015      	beq.n	800554a <_svfiprintf_r+0xf6>
 800551e:	9a07      	ldr	r2, [sp, #28]
 8005520:	4654      	mov	r4, sl
 8005522:	2000      	movs	r0, #0
 8005524:	f04f 0c0a 	mov.w	ip, #10
 8005528:	4621      	mov	r1, r4
 800552a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800552e:	3b30      	subs	r3, #48	; 0x30
 8005530:	2b09      	cmp	r3, #9
 8005532:	d94e      	bls.n	80055d2 <_svfiprintf_r+0x17e>
 8005534:	b1b0      	cbz	r0, 8005564 <_svfiprintf_r+0x110>
 8005536:	9207      	str	r2, [sp, #28]
 8005538:	e014      	b.n	8005564 <_svfiprintf_r+0x110>
 800553a:	eba0 0308 	sub.w	r3, r0, r8
 800553e:	fa09 f303 	lsl.w	r3, r9, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	46a2      	mov	sl, r4
 8005548:	e7d2      	b.n	80054f0 <_svfiprintf_r+0x9c>
 800554a:	9b03      	ldr	r3, [sp, #12]
 800554c:	1d19      	adds	r1, r3, #4
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	9103      	str	r1, [sp, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfbb      	ittet	lt
 8005556:	425b      	neglt	r3, r3
 8005558:	f042 0202 	orrlt.w	r2, r2, #2
 800555c:	9307      	strge	r3, [sp, #28]
 800555e:	9307      	strlt	r3, [sp, #28]
 8005560:	bfb8      	it	lt
 8005562:	9204      	strlt	r2, [sp, #16]
 8005564:	7823      	ldrb	r3, [r4, #0]
 8005566:	2b2e      	cmp	r3, #46	; 0x2e
 8005568:	d10c      	bne.n	8005584 <_svfiprintf_r+0x130>
 800556a:	7863      	ldrb	r3, [r4, #1]
 800556c:	2b2a      	cmp	r3, #42	; 0x2a
 800556e:	d135      	bne.n	80055dc <_svfiprintf_r+0x188>
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	9203      	str	r2, [sp, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	bfb8      	it	lt
 800557c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005580:	3402      	adds	r4, #2
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005650 <_svfiprintf_r+0x1fc>
 8005588:	7821      	ldrb	r1, [r4, #0]
 800558a:	2203      	movs	r2, #3
 800558c:	4650      	mov	r0, sl
 800558e:	f7fa fe27 	bl	80001e0 <memchr>
 8005592:	b140      	cbz	r0, 80055a6 <_svfiprintf_r+0x152>
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	eba0 000a 	sub.w	r0, r0, sl
 800559a:	fa03 f000 	lsl.w	r0, r3, r0
 800559e:	9b04      	ldr	r3, [sp, #16]
 80055a0:	4303      	orrs	r3, r0
 80055a2:	3401      	adds	r4, #1
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055aa:	4826      	ldr	r0, [pc, #152]	; (8005644 <_svfiprintf_r+0x1f0>)
 80055ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055b0:	2206      	movs	r2, #6
 80055b2:	f7fa fe15 	bl	80001e0 <memchr>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d038      	beq.n	800562c <_svfiprintf_r+0x1d8>
 80055ba:	4b23      	ldr	r3, [pc, #140]	; (8005648 <_svfiprintf_r+0x1f4>)
 80055bc:	bb1b      	cbnz	r3, 8005606 <_svfiprintf_r+0x1b2>
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	3307      	adds	r3, #7
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	3308      	adds	r3, #8
 80055c8:	9303      	str	r3, [sp, #12]
 80055ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055cc:	4433      	add	r3, r6
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	e767      	b.n	80054a2 <_svfiprintf_r+0x4e>
 80055d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d6:	460c      	mov	r4, r1
 80055d8:	2001      	movs	r0, #1
 80055da:	e7a5      	b.n	8005528 <_svfiprintf_r+0xd4>
 80055dc:	2300      	movs	r3, #0
 80055de:	3401      	adds	r4, #1
 80055e0:	9305      	str	r3, [sp, #20]
 80055e2:	4619      	mov	r1, r3
 80055e4:	f04f 0c0a 	mov.w	ip, #10
 80055e8:	4620      	mov	r0, r4
 80055ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ee:	3a30      	subs	r2, #48	; 0x30
 80055f0:	2a09      	cmp	r2, #9
 80055f2:	d903      	bls.n	80055fc <_svfiprintf_r+0x1a8>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0c5      	beq.n	8005584 <_svfiprintf_r+0x130>
 80055f8:	9105      	str	r1, [sp, #20]
 80055fa:	e7c3      	b.n	8005584 <_svfiprintf_r+0x130>
 80055fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005600:	4604      	mov	r4, r0
 8005602:	2301      	movs	r3, #1
 8005604:	e7f0      	b.n	80055e8 <_svfiprintf_r+0x194>
 8005606:	ab03      	add	r3, sp, #12
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	462a      	mov	r2, r5
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <_svfiprintf_r+0x1f8>)
 800560e:	a904      	add	r1, sp, #16
 8005610:	4638      	mov	r0, r7
 8005612:	f3af 8000 	nop.w
 8005616:	1c42      	adds	r2, r0, #1
 8005618:	4606      	mov	r6, r0
 800561a:	d1d6      	bne.n	80055ca <_svfiprintf_r+0x176>
 800561c:	89ab      	ldrh	r3, [r5, #12]
 800561e:	065b      	lsls	r3, r3, #25
 8005620:	f53f af2c 	bmi.w	800547c <_svfiprintf_r+0x28>
 8005624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005626:	b01d      	add	sp, #116	; 0x74
 8005628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562c:	ab03      	add	r3, sp, #12
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	462a      	mov	r2, r5
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <_svfiprintf_r+0x1f8>)
 8005634:	a904      	add	r1, sp, #16
 8005636:	4638      	mov	r0, r7
 8005638:	f000 f87a 	bl	8005730 <_printf_i>
 800563c:	e7eb      	b.n	8005616 <_svfiprintf_r+0x1c2>
 800563e:	bf00      	nop
 8005640:	08005d38 	.word	0x08005d38
 8005644:	08005d42 	.word	0x08005d42
 8005648:	00000000 	.word	0x00000000
 800564c:	0800539d 	.word	0x0800539d
 8005650:	08005d3e 	.word	0x08005d3e

08005654 <_printf_common>:
 8005654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005658:	4616      	mov	r6, r2
 800565a:	4699      	mov	r9, r3
 800565c:	688a      	ldr	r2, [r1, #8]
 800565e:	690b      	ldr	r3, [r1, #16]
 8005660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005664:	4293      	cmp	r3, r2
 8005666:	bfb8      	it	lt
 8005668:	4613      	movlt	r3, r2
 800566a:	6033      	str	r3, [r6, #0]
 800566c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005670:	4607      	mov	r7, r0
 8005672:	460c      	mov	r4, r1
 8005674:	b10a      	cbz	r2, 800567a <_printf_common+0x26>
 8005676:	3301      	adds	r3, #1
 8005678:	6033      	str	r3, [r6, #0]
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	0699      	lsls	r1, r3, #26
 800567e:	bf42      	ittt	mi
 8005680:	6833      	ldrmi	r3, [r6, #0]
 8005682:	3302      	addmi	r3, #2
 8005684:	6033      	strmi	r3, [r6, #0]
 8005686:	6825      	ldr	r5, [r4, #0]
 8005688:	f015 0506 	ands.w	r5, r5, #6
 800568c:	d106      	bne.n	800569c <_printf_common+0x48>
 800568e:	f104 0a19 	add.w	sl, r4, #25
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	6832      	ldr	r2, [r6, #0]
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	42ab      	cmp	r3, r5
 800569a:	dc26      	bgt.n	80056ea <_printf_common+0x96>
 800569c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056a0:	1e13      	subs	r3, r2, #0
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	bf18      	it	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	0692      	lsls	r2, r2, #26
 80056aa:	d42b      	bmi.n	8005704 <_printf_common+0xb0>
 80056ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056b0:	4649      	mov	r1, r9
 80056b2:	4638      	mov	r0, r7
 80056b4:	47c0      	blx	r8
 80056b6:	3001      	adds	r0, #1
 80056b8:	d01e      	beq.n	80056f8 <_printf_common+0xa4>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	68e5      	ldr	r5, [r4, #12]
 80056be:	6832      	ldr	r2, [r6, #0]
 80056c0:	f003 0306 	and.w	r3, r3, #6
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	bf08      	it	eq
 80056c8:	1aad      	subeq	r5, r5, r2
 80056ca:	68a3      	ldr	r3, [r4, #8]
 80056cc:	6922      	ldr	r2, [r4, #16]
 80056ce:	bf0c      	ite	eq
 80056d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d4:	2500      	movne	r5, #0
 80056d6:	4293      	cmp	r3, r2
 80056d8:	bfc4      	itt	gt
 80056da:	1a9b      	subgt	r3, r3, r2
 80056dc:	18ed      	addgt	r5, r5, r3
 80056de:	2600      	movs	r6, #0
 80056e0:	341a      	adds	r4, #26
 80056e2:	42b5      	cmp	r5, r6
 80056e4:	d11a      	bne.n	800571c <_printf_common+0xc8>
 80056e6:	2000      	movs	r0, #0
 80056e8:	e008      	b.n	80056fc <_printf_common+0xa8>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4652      	mov	r2, sl
 80056ee:	4649      	mov	r1, r9
 80056f0:	4638      	mov	r0, r7
 80056f2:	47c0      	blx	r8
 80056f4:	3001      	adds	r0, #1
 80056f6:	d103      	bne.n	8005700 <_printf_common+0xac>
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295
 80056fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005700:	3501      	adds	r5, #1
 8005702:	e7c6      	b.n	8005692 <_printf_common+0x3e>
 8005704:	18e1      	adds	r1, r4, r3
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	2030      	movs	r0, #48	; 0x30
 800570a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800570e:	4422      	add	r2, r4
 8005710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005718:	3302      	adds	r3, #2
 800571a:	e7c7      	b.n	80056ac <_printf_common+0x58>
 800571c:	2301      	movs	r3, #1
 800571e:	4622      	mov	r2, r4
 8005720:	4649      	mov	r1, r9
 8005722:	4638      	mov	r0, r7
 8005724:	47c0      	blx	r8
 8005726:	3001      	adds	r0, #1
 8005728:	d0e6      	beq.n	80056f8 <_printf_common+0xa4>
 800572a:	3601      	adds	r6, #1
 800572c:	e7d9      	b.n	80056e2 <_printf_common+0x8e>
	...

08005730 <_printf_i>:
 8005730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	7e0f      	ldrb	r7, [r1, #24]
 8005736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005738:	2f78      	cmp	r7, #120	; 0x78
 800573a:	4691      	mov	r9, r2
 800573c:	4680      	mov	r8, r0
 800573e:	460c      	mov	r4, r1
 8005740:	469a      	mov	sl, r3
 8005742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005746:	d807      	bhi.n	8005758 <_printf_i+0x28>
 8005748:	2f62      	cmp	r7, #98	; 0x62
 800574a:	d80a      	bhi.n	8005762 <_printf_i+0x32>
 800574c:	2f00      	cmp	r7, #0
 800574e:	f000 80d8 	beq.w	8005902 <_printf_i+0x1d2>
 8005752:	2f58      	cmp	r7, #88	; 0x58
 8005754:	f000 80a3 	beq.w	800589e <_printf_i+0x16e>
 8005758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005760:	e03a      	b.n	80057d8 <_printf_i+0xa8>
 8005762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005766:	2b15      	cmp	r3, #21
 8005768:	d8f6      	bhi.n	8005758 <_printf_i+0x28>
 800576a:	a101      	add	r1, pc, #4	; (adr r1, 8005770 <_printf_i+0x40>)
 800576c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057dd 	.word	0x080057dd
 8005778:	08005759 	.word	0x08005759
 800577c:	08005759 	.word	0x08005759
 8005780:	08005759 	.word	0x08005759
 8005784:	08005759 	.word	0x08005759
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005759 	.word	0x08005759
 8005790:	08005759 	.word	0x08005759
 8005794:	08005759 	.word	0x08005759
 8005798:	08005759 	.word	0x08005759
 800579c:	080058e9 	.word	0x080058e9
 80057a0:	0800580d 	.word	0x0800580d
 80057a4:	080058cb 	.word	0x080058cb
 80057a8:	08005759 	.word	0x08005759
 80057ac:	08005759 	.word	0x08005759
 80057b0:	0800590b 	.word	0x0800590b
 80057b4:	08005759 	.word	0x08005759
 80057b8:	0800580d 	.word	0x0800580d
 80057bc:	08005759 	.word	0x08005759
 80057c0:	08005759 	.word	0x08005759
 80057c4:	080058d3 	.word	0x080058d3
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	1d1a      	adds	r2, r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	602a      	str	r2, [r5, #0]
 80057d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d8:	2301      	movs	r3, #1
 80057da:	e0a3      	b.n	8005924 <_printf_i+0x1f4>
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	6829      	ldr	r1, [r5, #0]
 80057e0:	0606      	lsls	r6, r0, #24
 80057e2:	f101 0304 	add.w	r3, r1, #4
 80057e6:	d50a      	bpl.n	80057fe <_printf_i+0xce>
 80057e8:	680e      	ldr	r6, [r1, #0]
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	2e00      	cmp	r6, #0
 80057ee:	da03      	bge.n	80057f8 <_printf_i+0xc8>
 80057f0:	232d      	movs	r3, #45	; 0x2d
 80057f2:	4276      	negs	r6, r6
 80057f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f8:	485e      	ldr	r0, [pc, #376]	; (8005974 <_printf_i+0x244>)
 80057fa:	230a      	movs	r3, #10
 80057fc:	e019      	b.n	8005832 <_printf_i+0x102>
 80057fe:	680e      	ldr	r6, [r1, #0]
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005806:	bf18      	it	ne
 8005808:	b236      	sxthne	r6, r6
 800580a:	e7ef      	b.n	80057ec <_printf_i+0xbc>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	6820      	ldr	r0, [r4, #0]
 8005810:	1d19      	adds	r1, r3, #4
 8005812:	6029      	str	r1, [r5, #0]
 8005814:	0601      	lsls	r1, r0, #24
 8005816:	d501      	bpl.n	800581c <_printf_i+0xec>
 8005818:	681e      	ldr	r6, [r3, #0]
 800581a:	e002      	b.n	8005822 <_printf_i+0xf2>
 800581c:	0646      	lsls	r6, r0, #25
 800581e:	d5fb      	bpl.n	8005818 <_printf_i+0xe8>
 8005820:	881e      	ldrh	r6, [r3, #0]
 8005822:	4854      	ldr	r0, [pc, #336]	; (8005974 <_printf_i+0x244>)
 8005824:	2f6f      	cmp	r7, #111	; 0x6f
 8005826:	bf0c      	ite	eq
 8005828:	2308      	moveq	r3, #8
 800582a:	230a      	movne	r3, #10
 800582c:	2100      	movs	r1, #0
 800582e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005832:	6865      	ldr	r5, [r4, #4]
 8005834:	60a5      	str	r5, [r4, #8]
 8005836:	2d00      	cmp	r5, #0
 8005838:	bfa2      	ittt	ge
 800583a:	6821      	ldrge	r1, [r4, #0]
 800583c:	f021 0104 	bicge.w	r1, r1, #4
 8005840:	6021      	strge	r1, [r4, #0]
 8005842:	b90e      	cbnz	r6, 8005848 <_printf_i+0x118>
 8005844:	2d00      	cmp	r5, #0
 8005846:	d04d      	beq.n	80058e4 <_printf_i+0x1b4>
 8005848:	4615      	mov	r5, r2
 800584a:	fbb6 f1f3 	udiv	r1, r6, r3
 800584e:	fb03 6711 	mls	r7, r3, r1, r6
 8005852:	5dc7      	ldrb	r7, [r0, r7]
 8005854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005858:	4637      	mov	r7, r6
 800585a:	42bb      	cmp	r3, r7
 800585c:	460e      	mov	r6, r1
 800585e:	d9f4      	bls.n	800584a <_printf_i+0x11a>
 8005860:	2b08      	cmp	r3, #8
 8005862:	d10b      	bne.n	800587c <_printf_i+0x14c>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	07de      	lsls	r6, r3, #31
 8005868:	d508      	bpl.n	800587c <_printf_i+0x14c>
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	6861      	ldr	r1, [r4, #4]
 800586e:	4299      	cmp	r1, r3
 8005870:	bfde      	ittt	le
 8005872:	2330      	movle	r3, #48	; 0x30
 8005874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800587c:	1b52      	subs	r2, r2, r5
 800587e:	6122      	str	r2, [r4, #16]
 8005880:	f8cd a000 	str.w	sl, [sp]
 8005884:	464b      	mov	r3, r9
 8005886:	aa03      	add	r2, sp, #12
 8005888:	4621      	mov	r1, r4
 800588a:	4640      	mov	r0, r8
 800588c:	f7ff fee2 	bl	8005654 <_printf_common>
 8005890:	3001      	adds	r0, #1
 8005892:	d14c      	bne.n	800592e <_printf_i+0x1fe>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	b004      	add	sp, #16
 800589a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589e:	4835      	ldr	r0, [pc, #212]	; (8005974 <_printf_i+0x244>)
 80058a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058a4:	6829      	ldr	r1, [r5, #0]
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80058ac:	6029      	str	r1, [r5, #0]
 80058ae:	061d      	lsls	r5, r3, #24
 80058b0:	d514      	bpl.n	80058dc <_printf_i+0x1ac>
 80058b2:	07df      	lsls	r7, r3, #31
 80058b4:	bf44      	itt	mi
 80058b6:	f043 0320 	orrmi.w	r3, r3, #32
 80058ba:	6023      	strmi	r3, [r4, #0]
 80058bc:	b91e      	cbnz	r6, 80058c6 <_printf_i+0x196>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	f023 0320 	bic.w	r3, r3, #32
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	2310      	movs	r3, #16
 80058c8:	e7b0      	b.n	800582c <_printf_i+0xfc>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	f043 0320 	orr.w	r3, r3, #32
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	2378      	movs	r3, #120	; 0x78
 80058d4:	4828      	ldr	r0, [pc, #160]	; (8005978 <_printf_i+0x248>)
 80058d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058da:	e7e3      	b.n	80058a4 <_printf_i+0x174>
 80058dc:	0659      	lsls	r1, r3, #25
 80058de:	bf48      	it	mi
 80058e0:	b2b6      	uxthmi	r6, r6
 80058e2:	e7e6      	b.n	80058b2 <_printf_i+0x182>
 80058e4:	4615      	mov	r5, r2
 80058e6:	e7bb      	b.n	8005860 <_printf_i+0x130>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	6826      	ldr	r6, [r4, #0]
 80058ec:	6961      	ldr	r1, [r4, #20]
 80058ee:	1d18      	adds	r0, r3, #4
 80058f0:	6028      	str	r0, [r5, #0]
 80058f2:	0635      	lsls	r5, r6, #24
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	d501      	bpl.n	80058fc <_printf_i+0x1cc>
 80058f8:	6019      	str	r1, [r3, #0]
 80058fa:	e002      	b.n	8005902 <_printf_i+0x1d2>
 80058fc:	0670      	lsls	r0, r6, #25
 80058fe:	d5fb      	bpl.n	80058f8 <_printf_i+0x1c8>
 8005900:	8019      	strh	r1, [r3, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	6123      	str	r3, [r4, #16]
 8005906:	4615      	mov	r5, r2
 8005908:	e7ba      	b.n	8005880 <_printf_i+0x150>
 800590a:	682b      	ldr	r3, [r5, #0]
 800590c:	1d1a      	adds	r2, r3, #4
 800590e:	602a      	str	r2, [r5, #0]
 8005910:	681d      	ldr	r5, [r3, #0]
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	2100      	movs	r1, #0
 8005916:	4628      	mov	r0, r5
 8005918:	f7fa fc62 	bl	80001e0 <memchr>
 800591c:	b108      	cbz	r0, 8005922 <_printf_i+0x1f2>
 800591e:	1b40      	subs	r0, r0, r5
 8005920:	6060      	str	r0, [r4, #4]
 8005922:	6863      	ldr	r3, [r4, #4]
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	2300      	movs	r3, #0
 8005928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592c:	e7a8      	b.n	8005880 <_printf_i+0x150>
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	462a      	mov	r2, r5
 8005932:	4649      	mov	r1, r9
 8005934:	4640      	mov	r0, r8
 8005936:	47d0      	blx	sl
 8005938:	3001      	adds	r0, #1
 800593a:	d0ab      	beq.n	8005894 <_printf_i+0x164>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	079b      	lsls	r3, r3, #30
 8005940:	d413      	bmi.n	800596a <_printf_i+0x23a>
 8005942:	68e0      	ldr	r0, [r4, #12]
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	4298      	cmp	r0, r3
 8005948:	bfb8      	it	lt
 800594a:	4618      	movlt	r0, r3
 800594c:	e7a4      	b.n	8005898 <_printf_i+0x168>
 800594e:	2301      	movs	r3, #1
 8005950:	4632      	mov	r2, r6
 8005952:	4649      	mov	r1, r9
 8005954:	4640      	mov	r0, r8
 8005956:	47d0      	blx	sl
 8005958:	3001      	adds	r0, #1
 800595a:	d09b      	beq.n	8005894 <_printf_i+0x164>
 800595c:	3501      	adds	r5, #1
 800595e:	68e3      	ldr	r3, [r4, #12]
 8005960:	9903      	ldr	r1, [sp, #12]
 8005962:	1a5b      	subs	r3, r3, r1
 8005964:	42ab      	cmp	r3, r5
 8005966:	dcf2      	bgt.n	800594e <_printf_i+0x21e>
 8005968:	e7eb      	b.n	8005942 <_printf_i+0x212>
 800596a:	2500      	movs	r5, #0
 800596c:	f104 0619 	add.w	r6, r4, #25
 8005970:	e7f5      	b.n	800595e <_printf_i+0x22e>
 8005972:	bf00      	nop
 8005974:	08005d49 	.word	0x08005d49
 8005978:	08005d5a 	.word	0x08005d5a

0800597c <memmove>:
 800597c:	4288      	cmp	r0, r1
 800597e:	b510      	push	{r4, lr}
 8005980:	eb01 0402 	add.w	r4, r1, r2
 8005984:	d902      	bls.n	800598c <memmove+0x10>
 8005986:	4284      	cmp	r4, r0
 8005988:	4623      	mov	r3, r4
 800598a:	d807      	bhi.n	800599c <memmove+0x20>
 800598c:	1e43      	subs	r3, r0, #1
 800598e:	42a1      	cmp	r1, r4
 8005990:	d008      	beq.n	80059a4 <memmove+0x28>
 8005992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800599a:	e7f8      	b.n	800598e <memmove+0x12>
 800599c:	4402      	add	r2, r0
 800599e:	4601      	mov	r1, r0
 80059a0:	428a      	cmp	r2, r1
 80059a2:	d100      	bne.n	80059a6 <memmove+0x2a>
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059ae:	e7f7      	b.n	80059a0 <memmove+0x24>

080059b0 <_free_r>:
 80059b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b2:	2900      	cmp	r1, #0
 80059b4:	d044      	beq.n	8005a40 <_free_r+0x90>
 80059b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ba:	9001      	str	r0, [sp, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f1a1 0404 	sub.w	r4, r1, #4
 80059c2:	bfb8      	it	lt
 80059c4:	18e4      	addlt	r4, r4, r3
 80059c6:	f000 f913 	bl	8005bf0 <__malloc_lock>
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <_free_r+0x94>)
 80059cc:	9801      	ldr	r0, [sp, #4]
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	b933      	cbnz	r3, 80059e0 <_free_r+0x30>
 80059d2:	6063      	str	r3, [r4, #4]
 80059d4:	6014      	str	r4, [r2, #0]
 80059d6:	b003      	add	sp, #12
 80059d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059dc:	f000 b90e 	b.w	8005bfc <__malloc_unlock>
 80059e0:	42a3      	cmp	r3, r4
 80059e2:	d908      	bls.n	80059f6 <_free_r+0x46>
 80059e4:	6825      	ldr	r5, [r4, #0]
 80059e6:	1961      	adds	r1, r4, r5
 80059e8:	428b      	cmp	r3, r1
 80059ea:	bf01      	itttt	eq
 80059ec:	6819      	ldreq	r1, [r3, #0]
 80059ee:	685b      	ldreq	r3, [r3, #4]
 80059f0:	1949      	addeq	r1, r1, r5
 80059f2:	6021      	streq	r1, [r4, #0]
 80059f4:	e7ed      	b.n	80059d2 <_free_r+0x22>
 80059f6:	461a      	mov	r2, r3
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	b10b      	cbz	r3, 8005a00 <_free_r+0x50>
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	d9fa      	bls.n	80059f6 <_free_r+0x46>
 8005a00:	6811      	ldr	r1, [r2, #0]
 8005a02:	1855      	adds	r5, r2, r1
 8005a04:	42a5      	cmp	r5, r4
 8005a06:	d10b      	bne.n	8005a20 <_free_r+0x70>
 8005a08:	6824      	ldr	r4, [r4, #0]
 8005a0a:	4421      	add	r1, r4
 8005a0c:	1854      	adds	r4, r2, r1
 8005a0e:	42a3      	cmp	r3, r4
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	d1e0      	bne.n	80059d6 <_free_r+0x26>
 8005a14:	681c      	ldr	r4, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	6053      	str	r3, [r2, #4]
 8005a1a:	4421      	add	r1, r4
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	e7da      	b.n	80059d6 <_free_r+0x26>
 8005a20:	d902      	bls.n	8005a28 <_free_r+0x78>
 8005a22:	230c      	movs	r3, #12
 8005a24:	6003      	str	r3, [r0, #0]
 8005a26:	e7d6      	b.n	80059d6 <_free_r+0x26>
 8005a28:	6825      	ldr	r5, [r4, #0]
 8005a2a:	1961      	adds	r1, r4, r5
 8005a2c:	428b      	cmp	r3, r1
 8005a2e:	bf04      	itt	eq
 8005a30:	6819      	ldreq	r1, [r3, #0]
 8005a32:	685b      	ldreq	r3, [r3, #4]
 8005a34:	6063      	str	r3, [r4, #4]
 8005a36:	bf04      	itt	eq
 8005a38:	1949      	addeq	r1, r1, r5
 8005a3a:	6021      	streq	r1, [r4, #0]
 8005a3c:	6054      	str	r4, [r2, #4]
 8005a3e:	e7ca      	b.n	80059d6 <_free_r+0x26>
 8005a40:	b003      	add	sp, #12
 8005a42:	bd30      	pop	{r4, r5, pc}
 8005a44:	20012f8c 	.word	0x20012f8c

08005a48 <sbrk_aligned>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4e0e      	ldr	r6, [pc, #56]	; (8005a84 <sbrk_aligned+0x3c>)
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	6831      	ldr	r1, [r6, #0]
 8005a50:	4605      	mov	r5, r0
 8005a52:	b911      	cbnz	r1, 8005a5a <sbrk_aligned+0x12>
 8005a54:	f000 f8bc 	bl	8005bd0 <_sbrk_r>
 8005a58:	6030      	str	r0, [r6, #0]
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 f8b7 	bl	8005bd0 <_sbrk_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d00a      	beq.n	8005a7c <sbrk_aligned+0x34>
 8005a66:	1cc4      	adds	r4, r0, #3
 8005a68:	f024 0403 	bic.w	r4, r4, #3
 8005a6c:	42a0      	cmp	r0, r4
 8005a6e:	d007      	beq.n	8005a80 <sbrk_aligned+0x38>
 8005a70:	1a21      	subs	r1, r4, r0
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f8ac 	bl	8005bd0 <_sbrk_r>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d101      	bne.n	8005a80 <sbrk_aligned+0x38>
 8005a7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a80:	4620      	mov	r0, r4
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	20012f90 	.word	0x20012f90

08005a88 <_malloc_r>:
 8005a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8c:	1ccd      	adds	r5, r1, #3
 8005a8e:	f025 0503 	bic.w	r5, r5, #3
 8005a92:	3508      	adds	r5, #8
 8005a94:	2d0c      	cmp	r5, #12
 8005a96:	bf38      	it	cc
 8005a98:	250c      	movcc	r5, #12
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	db01      	blt.n	8005aa4 <_malloc_r+0x1c>
 8005aa0:	42a9      	cmp	r1, r5
 8005aa2:	d905      	bls.n	8005ab0 <_malloc_r+0x28>
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	4630      	mov	r0, r6
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab0:	4e2e      	ldr	r6, [pc, #184]	; (8005b6c <_malloc_r+0xe4>)
 8005ab2:	f000 f89d 	bl	8005bf0 <__malloc_lock>
 8005ab6:	6833      	ldr	r3, [r6, #0]
 8005ab8:	461c      	mov	r4, r3
 8005aba:	bb34      	cbnz	r4, 8005b0a <_malloc_r+0x82>
 8005abc:	4629      	mov	r1, r5
 8005abe:	4638      	mov	r0, r7
 8005ac0:	f7ff ffc2 	bl	8005a48 <sbrk_aligned>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	d14d      	bne.n	8005b66 <_malloc_r+0xde>
 8005aca:	6834      	ldr	r4, [r6, #0]
 8005acc:	4626      	mov	r6, r4
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	d140      	bne.n	8005b54 <_malloc_r+0xcc>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	eb04 0803 	add.w	r8, r4, r3
 8005adc:	f000 f878 	bl	8005bd0 <_sbrk_r>
 8005ae0:	4580      	cmp	r8, r0
 8005ae2:	d13a      	bne.n	8005b5a <_malloc_r+0xd2>
 8005ae4:	6821      	ldr	r1, [r4, #0]
 8005ae6:	3503      	adds	r5, #3
 8005ae8:	1a6d      	subs	r5, r5, r1
 8005aea:	f025 0503 	bic.w	r5, r5, #3
 8005aee:	3508      	adds	r5, #8
 8005af0:	2d0c      	cmp	r5, #12
 8005af2:	bf38      	it	cc
 8005af4:	250c      	movcc	r5, #12
 8005af6:	4629      	mov	r1, r5
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff ffa5 	bl	8005a48 <sbrk_aligned>
 8005afe:	3001      	adds	r0, #1
 8005b00:	d02b      	beq.n	8005b5a <_malloc_r+0xd2>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	442b      	add	r3, r5
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	e00e      	b.n	8005b28 <_malloc_r+0xa0>
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	1b52      	subs	r2, r2, r5
 8005b0e:	d41e      	bmi.n	8005b4e <_malloc_r+0xc6>
 8005b10:	2a0b      	cmp	r2, #11
 8005b12:	d916      	bls.n	8005b42 <_malloc_r+0xba>
 8005b14:	1961      	adds	r1, r4, r5
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	6025      	str	r5, [r4, #0]
 8005b1a:	bf18      	it	ne
 8005b1c:	6059      	strne	r1, [r3, #4]
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	bf08      	it	eq
 8005b22:	6031      	streq	r1, [r6, #0]
 8005b24:	5162      	str	r2, [r4, r5]
 8005b26:	604b      	str	r3, [r1, #4]
 8005b28:	4638      	mov	r0, r7
 8005b2a:	f104 060b 	add.w	r6, r4, #11
 8005b2e:	f000 f865 	bl	8005bfc <__malloc_unlock>
 8005b32:	f026 0607 	bic.w	r6, r6, #7
 8005b36:	1d23      	adds	r3, r4, #4
 8005b38:	1af2      	subs	r2, r6, r3
 8005b3a:	d0b6      	beq.n	8005aaa <_malloc_r+0x22>
 8005b3c:	1b9b      	subs	r3, r3, r6
 8005b3e:	50a3      	str	r3, [r4, r2]
 8005b40:	e7b3      	b.n	8005aaa <_malloc_r+0x22>
 8005b42:	6862      	ldr	r2, [r4, #4]
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	bf0c      	ite	eq
 8005b48:	6032      	streq	r2, [r6, #0]
 8005b4a:	605a      	strne	r2, [r3, #4]
 8005b4c:	e7ec      	b.n	8005b28 <_malloc_r+0xa0>
 8005b4e:	4623      	mov	r3, r4
 8005b50:	6864      	ldr	r4, [r4, #4]
 8005b52:	e7b2      	b.n	8005aba <_malloc_r+0x32>
 8005b54:	4634      	mov	r4, r6
 8005b56:	6876      	ldr	r6, [r6, #4]
 8005b58:	e7b9      	b.n	8005ace <_malloc_r+0x46>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f000 f84c 	bl	8005bfc <__malloc_unlock>
 8005b64:	e7a1      	b.n	8005aaa <_malloc_r+0x22>
 8005b66:	6025      	str	r5, [r4, #0]
 8005b68:	e7de      	b.n	8005b28 <_malloc_r+0xa0>
 8005b6a:	bf00      	nop
 8005b6c:	20012f8c 	.word	0x20012f8c

08005b70 <_realloc_r>:
 8005b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b74:	4680      	mov	r8, r0
 8005b76:	4614      	mov	r4, r2
 8005b78:	460e      	mov	r6, r1
 8005b7a:	b921      	cbnz	r1, 8005b86 <_realloc_r+0x16>
 8005b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b80:	4611      	mov	r1, r2
 8005b82:	f7ff bf81 	b.w	8005a88 <_malloc_r>
 8005b86:	b92a      	cbnz	r2, 8005b94 <_realloc_r+0x24>
 8005b88:	f7ff ff12 	bl	80059b0 <_free_r>
 8005b8c:	4625      	mov	r5, r4
 8005b8e:	4628      	mov	r0, r5
 8005b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b94:	f000 f838 	bl	8005c08 <_malloc_usable_size_r>
 8005b98:	4284      	cmp	r4, r0
 8005b9a:	4607      	mov	r7, r0
 8005b9c:	d802      	bhi.n	8005ba4 <_realloc_r+0x34>
 8005b9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ba2:	d812      	bhi.n	8005bca <_realloc_r+0x5a>
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	f7ff ff6e 	bl	8005a88 <_malloc_r>
 8005bac:	4605      	mov	r5, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d0ed      	beq.n	8005b8e <_realloc_r+0x1e>
 8005bb2:	42bc      	cmp	r4, r7
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	bf28      	it	cs
 8005bba:	463a      	movcs	r2, r7
 8005bbc:	f7ff fbb8 	bl	8005330 <memcpy>
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	f7ff fef4 	bl	80059b0 <_free_r>
 8005bc8:	e7e1      	b.n	8005b8e <_realloc_r+0x1e>
 8005bca:	4635      	mov	r5, r6
 8005bcc:	e7df      	b.n	8005b8e <_realloc_r+0x1e>
	...

08005bd0 <_sbrk_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d06      	ldr	r5, [pc, #24]	; (8005bec <_sbrk_r+0x1c>)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	f7fb f87e 	bl	8000cdc <_sbrk>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_sbrk_r+0x1a>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_sbrk_r+0x1a>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20012f94 	.word	0x20012f94

08005bf0 <__malloc_lock>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__malloc_lock+0x8>)
 8005bf2:	f000 b811 	b.w	8005c18 <__retarget_lock_acquire_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20012f98 	.word	0x20012f98

08005bfc <__malloc_unlock>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__malloc_unlock+0x8>)
 8005bfe:	f000 b80c 	b.w	8005c1a <__retarget_lock_release_recursive>
 8005c02:	bf00      	nop
 8005c04:	20012f98 	.word	0x20012f98

08005c08 <_malloc_usable_size_r>:
 8005c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c0c:	1f18      	subs	r0, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfbc      	itt	lt
 8005c12:	580b      	ldrlt	r3, [r1, r0]
 8005c14:	18c0      	addlt	r0, r0, r3
 8005c16:	4770      	bx	lr

08005c18 <__retarget_lock_acquire_recursive>:
 8005c18:	4770      	bx	lr

08005c1a <__retarget_lock_release_recursive>:
 8005c1a:	4770      	bx	lr

08005c1c <_init>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr

08005c28 <_fini>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr
